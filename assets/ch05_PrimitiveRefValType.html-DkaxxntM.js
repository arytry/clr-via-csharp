import{_ as e,r as p,o as c,c as o,a as s,d as n,b as l,e as a}from"./app-IxoMmWNN.js";const i={},u=a(`<h1 id="примитивные-ссылочные-и-значимые-типы" tabindex="-1"><a class="header-anchor" href="#примитивные-ссылочные-и-значимые-типы"><span>Примитивные, ссылочные и значимые типы</span></a></h1><h2 id="примитивные-типы-в-языках-программирования" tabindex="-1"><a class="header-anchor" href="#примитивные-типы-в-языках-программирования"><span>Примитивные типы в языках программирования</span></a></h2><p>Типы данных, которые поддерживаются компилятором напрямую, называются <em>примитивными</em> (primitive types); у них существуют прямые аналоги в .NET FCL. Ниже представлены типы FCL и соответствующие им примитивные типы C#. В других языка типам, удовлетворяющим CLS, соответствуют аналогичные примитивные типы.</p><table><thead><tr><th style="text-align:center;">Примитивный тип</th><th style="text-align:center;">FCL-тип</th><th style="text-align:center;">Совместимость с CLS</th><th style="text-align:left;">Описание</th></tr></thead><tbody><tr><td style="text-align:center;">sbyte</td><td style="text-align:center;">System.Sbyte</td><td style="text-align:center;">Нет</td><td style="text-align:left;">8-разрядное значение со знаком</td></tr><tr><td style="text-align:center;">byte</td><td style="text-align:center;">System.Byte</td><td style="text-align:center;">Да</td><td style="text-align:left;">8-разрядное значение без знака</td></tr><tr><td style="text-align:center;">short</td><td style="text-align:center;">System.Int16</td><td style="text-align:center;">Да</td><td style="text-align:left;">16-разрядное значение со знаком</td></tr><tr><td style="text-align:center;">ushort</td><td style="text-align:center;">System.Uint16</td><td style="text-align:center;">Нет</td><td style="text-align:left;">16-разрядное значение без знака</td></tr><tr><td style="text-align:center;">int</td><td style="text-align:center;">System.Int32</td><td style="text-align:center;">Да</td><td style="text-align:left;">32-разрядное значение со знаком</td></tr><tr><td style="text-align:center;">uint</td><td style="text-align:center;">System.Unit32</td><td style="text-align:center;">Нет</td><td style="text-align:left;">32-разрядное значение без знака</td></tr><tr><td style="text-align:center;">long</td><td style="text-align:center;">System.Int64</td><td style="text-align:center;">Да</td><td style="text-align:left;">64-разрядное значение со знаком</td></tr><tr><td style="text-align:center;">ulong</td><td style="text-align:center;">System.Uint64</td><td style="text-align:center;">Нет</td><td style="text-align:left;">64-разрядное значение без знака</td></tr><tr><td style="text-align:center;">char</td><td style="text-align:center;">System.Char</td><td style="text-align:center;">Да</td><td style="text-align:left;">16-разрядный символ Unicode</td></tr><tr><td style="text-align:center;">float</td><td style="text-align:center;">System.Single</td><td style="text-align:center;">Да</td><td style="text-align:left;">32-разрядное значение с плавающей точкой</td></tr><tr><td style="text-align:center;">double</td><td style="text-align:center;">System.Double</td><td style="text-align:center;">Да</td><td style="text-align:left;">64-разрядное значение с плавающей точкой</td></tr><tr><td style="text-align:center;">bool</td><td style="text-align:center;">System.Boolean</td><td style="text-align:center;">Да</td><td style="text-align:left;">Булево значение</td></tr><tr><td style="text-align:center;">decimal</td><td style="text-align:center;">System.Decimal</td><td style="text-align:center;">Да</td><td style="text-align:left;">128-разрядное значение с плавающей точкой повышенной точности (часто используется для выполнения финансовых операций)</td></tr><tr><td style="text-align:center;">string</td><td style="text-align:center;">System.String</td><td style="text-align:center;">Да</td><td style="text-align:left;">Массив символов</td></tr><tr><td style="text-align:center;">object</td><td style="text-align:center;">System.Sbyte</td><td style="text-align:center;">Да</td><td style="text-align:left;">Базовый тип для всех типов</td></tr><tr><td style="text-align:center;">dynamic</td><td style="text-align:center;">System.Sbyte</td><td style="text-align:center;">Да</td><td style="text-align:left;">Для CLR идентичен типу object (при этом позволяет участвовать в динамическом разрешении типа с упрощённым синтаксисом)</td></tr></tbody></table><p>Иначе говоря, можно считать, что компилятор C# автоматически предполагает, что во всех файлах подключены директивы вида <code>using &lt;primitive type&gt; = &lt;FCL-type&gt;;</code>.</p><p>Спецификация языка C# советует использовать ключевое слово, а не полное имя типа. Однако Джеффри Рихтер с этим не согласен по следующим причинам:</p><ul><li>Некоторые разработчики, используя ключевые слова, совершенно не понимаю, что за ними прячется: некоторые считают, что <code>int</code> представляет 32-разрядное число в 32-разрядной системе и 64-разрядное в 64-разрядной, что в корне неверно, так как <code>int</code> всегда представляет <code>System.Int32</code>.</li><li>В C# <code>long</code> представляет <code>System.Int64</code>, однако в других языках оно может обозначать другой тип (например, в C++/CLI оно трактуется как Int32). Это может привести к путанице в попытках прочитать код на новом языке.</li><li>У многих FCL типов есть методы, которые включают в себя имена типов. Из-за этого может возникать путаница, например, в методе <code>float val = bt.ReadSingle();</code>.</li></ul><p>Компилятор умеет выполнять явное и неявное приведение между примитивными типами. Неявное применяется от менее разрядных типов к более (если приведение безопасно: не сопряжено с потерей данных), а явное - наоборот.</p><p>Помимо приведения, компилятор знает и о литеральной форме записи примитивных типов (литералы считаются экземплярами типов, поэтому к ним спокойно можно применять методы <code>123.ToString();</code>).</p><p>Кроме этого, выражения, состоящие из литералов, вычисляют на этапе компиляции, что повышает скорость выполнения приложения.</p><p>Наконец, компилятор знает, в каком порядке интерпретировать все встречающиеся в коде операторы.</p><h3 id="проверяемые-и-непроверяемые-операции-для-примитивных-типов" tabindex="-1"><a class="header-anchor" href="#проверяемые-и-непроверяемые-операции-для-примитивных-типов"><span>Проверяемые и непроверяемые операции для примитивных типов</span></a></h3><p>Существует такое явление как переполнение, когда значение становится больше, чем допустимо для данного типа, и тогда старшие байты отбрасываются. Переполнение обычно не приветствуется, однако иногда (при вычислении хешей или контрольных сумм) может быть даже полезно.</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name">Byte</span> b <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
b <span class="token operator">=</span> <span class="token punctuation">(</span>Byte<span class="token punctuation">)</span> <span class="token punctuation">(</span>b <span class="token operator">+</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>При выполнении этой операции все значения операндов расширяются до 32 разрядов (или 64, если 32 недостаточно). Полученное 32-разрядное число помещается в переменную типа Byte, где и происходит переполнение и отсечение.</p><p>В каждом языке существуют свои правила обработки переполнения: какой-то язык может его игнорировать, а какой-то - вызывать исключения. В CLR для этого есть отдельные команды (add и add.ovf). Подобные команды есть для вычитания (sub/sub.ovf), умножения (mul/mul.ovf) и преобразования данных (conv/conv.ovf).</p><p>По умолчанию команды с проверкой переполнения выключены и программист должен это предусмотреть при написании приложения. Включить проверку можно с использованием параметры <code>/checked+</code> у компилятора, что замедлит выполнение программы. Однако, в этом случае стоит подумать об обработке выкидываемого исключения.</p><p>Но программистам вряд ли понравится необходимость включения или выключения этой возможности на этапе компиляции, поэтому в C# для этого придуман механизм гибкого управления проверки переполнения виде операторов <code>checked</code> и <code>unchecked</code>. Наряду с этими операторами в C# есть одноимённые инструкции, которые проверяют не операцию, а блок кода в фигурных скобках.</p><p>При использовании этих операторов стоит соблюдать некоторые правила:</p><ul><li>Использовать целочисленные типы со знаком, что позволит компилятору выявлять ошибку переполнения. Кроме того, некоторые компоненты библиотеки классов возвращают значения со знаком, и передача этих значений потребует меньшего количества преобразований типа.</li><li>Включать в блок <code>checked</code> любой код, в котором возможно переполнение (например, при вводе пользовательских данных), а затем обрабатывать исключение.</li><li>Включать в блок <code>unchecked</code> код, в котором переполнение не создаёт проблем.</li><li>В коде, где нет этих операторов или блоков, предполагается, что при переполнении должно происходить исключение.</li></ul><p>Тип System.Decimal стоит особняком, так как в CLR он не относится к примитивным типам. Все математические операции описаны статическими методами и перегруженными операторами. Это означает, что в IL нет определённых команд для манипуляции числами, а значит, здесь не имеют эффекта операторы <code>checked</code> и <code>unchecked</code>.</p><h2 id="ссылочные-и-значимые-типы" tabindex="-1"><a class="header-anchor" href="#ссылочные-и-значимые-типы"><span>Ссылочные и значимые типы</span></a></h2><p>CLR поддерживает две разновидности типов: <em>ссылочные</em> (reference types) и <em>значимые</em> (value types). Большинство типов в FCL - ссылочные, но разработчики чаще всего используют значимые. Память для ссылочных типов выделяется из управляемой кучи, а оператор <code>new()</code> возвращает адрес в памяти. При работе со ссылочными типами следует учитывать следующие обстоятельства:</p><ul><li>Память всегда выделяется из управляемой кучи.</li><li>Каждый объект, размещённый в куче, содержит дополнительные члены, подлежащие инициализации.</li><li>Незанятые полезной информацией байты объекта обнуляются (это касается полей). Размещение объекта в управляемой куче со временем инициирует сборку мусора.</li></ul>`,24),d=s("em",null,"значимые",-1),r={href:"https://ru.wiktionary.org/wiki/%D1%80%D0%B0%D0%B7%D1%8B%D0%BC%D0%B5%D0%BD%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5",target:"_blank",rel:"noopener noreferrer"},k=a(`<p>В .NET Framework ссылочные типы называют <em>классами</em> (class), а значимые - <em>структурами</em> (struct) и <em>перечислениями</em> (enumeraton). Все структуры являются потомками абстрактного типа <code>System.ValueType</code> (по умолчанию все значимые типы должны быть производными от него), а он является производным от <code>System.Object</code>. Все перечисления являются производными от типа <code>System.Enum</code>, а он является производным от <code>System.ValueType</code>.</p><p>При определение собственного значимого типа нельзя выбрать произвольный базовый тип, но он может реализовывать один или несколько интерфейсов. Кроме того, в CLR значимый тип является изолированным, то есть он не может являться базовым типом.</p><p>В управляемом коде разработчик, описывающий тип, решает, где будет размещаться экземпляр этого типа, а разработчик, использующий этот тип, управлять этим не может.</p><p>В коде и на рисунке ниже описывается различие между ссылочными и значимыми типами.</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// Ссылочный тип (поскольку &#39;class&#39;)</span>
<span class="token keyword">class</span> <span class="token class-name">SomeRef</span> <span class="token punctuation">{</span> <span class="token keyword">public</span> <span class="token class-name">Int32</span> x<span class="token punctuation">;</span> <span class="token punctuation">}</span>

<span class="token comment">// Значимый тип (поскольку &#39;struct&#39;)</span>
<span class="token keyword">struct</span> <span class="token class-name">SomeVal</span> <span class="token punctuation">{</span> <span class="token keyword">public</span> <span class="token class-name">Int32</span> x<span class="token punctuation">;</span> <span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ValueTypeDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">SomeRef</span> r1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SomeRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Размещается в куче</span>
    <span class="token class-name">SomeVal</span> v1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SomeVal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Размещается в стеке</span>

    r1<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">// Разыменовывание указателя</span>
    v1<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">// Изменение в стеке</span>

    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>r1<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Отображается &quot;5&quot;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Также отображается &quot;5&quot;</span>

    <span class="token class-name">SomeRef</span> r2 <span class="token operator">=</span> r1<span class="token punctuation">;</span> <span class="token comment">// Копируется только ссылка (указатель)</span>
    <span class="token class-name">SomeVal</span> v2 <span class="token operator">=</span> v1<span class="token punctuation">;</span> <span class="token comment">// Помещаем в стек и копируем члены</span>

    r1<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span> <span class="token comment">// Изменяются r1.x и r2.x</span>
    v1<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span> <span class="token comment">// Изменяется v1.x, но не v2.x</span>

    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>r1<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Отображается &quot;8&quot;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>r2<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Отображается &quot;8&quot;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Отображается &quot;9&quot;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>v2<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Отображается &quot;5&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://github.com/kuzmin-nikita/CLR-via-CSharp/assets/80389873/1d508b4f-6425-4d8d-9af6-8cb226743976" alt="image"></p><p>При проектировании типов стоит проверить, не использовать ли вместо ссылочного типа значимый, так как иногда это может повысить эффективность кода. Сказанное справедливо для типов, удовлетворяющих всем условиям:</p><ul><li>Тип ведёт себя подобно примитивному типу. Это означает, что тип достаточно простой и у него нет членов, способных изменить экземплярное состояние. В это случае говорят, что тип <em>неизменяемый</em>(immutable).</li><li>Тип не обязан иметь любой другой тип в качестве базового.</li><li>Тип не имеет производных от него типов.</li></ul><p>Также необходимо учитывать размер экземпляров типа, потому что по умолчанию аргументы передаются по значению; при этом поля экземпляров значимого типа копируются, что негативно сказывается на производительности. Поэтому дополнительно необходимо, чтобы выполнялось хотя бы одно из условий:</p><ul><li>Размер экземпляров типа мал (примерно 16 байт или меньше).</li><li>Размер экземпляров типа велик (более 16 байт), но экземпляры не передаются в качестве аргументов метода и не являются возвращаемыми из метода значениями.</li></ul><p>Основные отличия между ссылочными и значимыми типами:</p><ul><li>Объекты значимого типа могут быть <em>упакованными</em> (boxed) и <em>неупакованными</em> (unboxed). Ссылочные типы существуют только в упакованной форме.</li><li>Значимые типы являются наследниками <code>System.ValueType</code>. Этот тип имеет все те же методы, что и <code>System.Object</code>, однако он переопределяет методы <code>Equals()</code>, чтобы тот сравнивал экземпляры по значениям, а также метод <code>GetHashCode()</code>, в котором алгоритм учитываются значения. Однако, из-за проблем с производительность стоит переопределять эти методы самому при написании значимых типов.</li><li>Поскольку нельзя наследоваться от значимого типа, то он не может быть абстрактным (является неявно запечатанным) и не может содержать виртуальных методов.</li><li>Так как значимый тип не указывает на объект в куче, то он не может быть <code>null</code> (за исключением <code>nullable</code> типов), соответственно, нельзя получить <code>NullReferenceException</code>.</li><li>При присваивании одной переменной значимого типа другой переменной происходит копирование всех полей. При присваивании переменной ссылочного типа - копируется адрес.</li><li>Вследствие предыдущего пункта несколько переменных ссылочного типа могут ссылаться на один объект в куче и изменения в одной переменной порождают изменения во всех остальных. Переменные значимого типа изолированы друг от друга.</li><li>Так как неупакованные значимые типы не размещаются в куче, то и занятая ими память освобождается сразу при возвращении стека к предыдущему кадру, не дожидаясь сборки мусора.</li></ul><h3 id="как-clr-управляет-размещением-полеи-для-типа" tabindex="-1"><a class="header-anchor" href="#как-clr-управляет-размещением-полеи-для-типа"><span>Как CLR управляет размещением полей для типа</span></a></h3><p>Для повышения производительности CLR дано право устанавливать порядок размещения полей типа. Например, среда может вытроить поля таким образом, что ссылки на объекты окажутся в одной группе, а поля данных и свойства - выровненные и упакованные - в другой. Однако при описании типа можно указать, сохранить ли порядок полей.</p><p>По умолчанию, поля ссылочных типов размещаются в памяти сгруппировано, а значимых - последовательности, так, как определил разработчик. Это можно изменить с помощью специальных атрибутов.</p><h2 id="упаковка-и-распаковка-значимых-типов" tabindex="-1"><a class="header-anchor" href="#упаковка-и-распаковка-значимых-типов"><span>Упаковка и распаковка значимых типов</span></a></h2><p>Значимые типы &quot;легче&quot; ссылочных: под них не выделяется память в управляемой куче, их не затрагивает сборка мусора, к ним нельзя обратиться через указатель. Однако часто требуется получать ссылку на экземпляр значимого типа. например при сохранении структуры <code>Point</code> в объекте типа <code>ArrayList</code>.</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// Объявляем значимый тип</span>
<span class="token keyword">struct</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">Int32</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">Program</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ArrayList</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Point</span> p<span class="token punctuation">;</span> <span class="token comment">// Выделяется память для Point (не в куче)</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Int32</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            p<span class="token punctuation">.</span>x <span class="token operator">=</span> p<span class="token punctuation">.</span>y <span class="token operator">=</span> i<span class="token punctuation">;</span> <span class="token comment">// Инициализация членов в нашем значимом типе</span>
            a<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Упаковка значимого типа и добавление ссылки в ArrayList</span>
        <span class="token punctuation">}</span>
    <span class="token range operator">..</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Метод <code>ArrayList.Add()</code> принимает в качестве аргумента <code>Object</code>, однако в примере передаётся экземпляр значимого типа. Чтобы код работал, необходимо преобразовать аргумент в объект из управляемой кучи и получить на него ссылку. Для преобразования значимого типа в ссылочный служит <em>упаковка</em> (boxing):</p><ol><li>В управляемой куче выделяется память, объём которой определяется длиной значимого типа и двумя дополнительными членами - указателем на объект-тип и индексом блока синхронизации (эти члена необходимы для всех объектов в управляемой куче).</li><li>Поля значимого типа копируются в эту область в управляемой куче.</li><li>Возвращается адрес объекта.</li></ol><p>Время жизни упакованного значимого типа (время нахождения в куче до следующей сборки мусора) превышает время жизни неупакованного значимого типа (время жизни кадра стека).</p><p>Обобщённые классы коллекций значительно сокращают количество необходимых упаковок, так как умеют хранить в себе значимые типы. Это сокращает количество выделяемой памяти в управляемой куче и количество циклов работы сборщика мусора. В результате обеспечивается безопасность типов на этапе компиляции, а код становится понятнее за счёт сокращения числа приведения типов.</p><p>При попытке присвоить упакованный объект в переменную значимого типа происходит обратная операция: содержимое упакованного объекта копируются в переменную значимого типа, находящуюся в потоке. CLR выполняет эту процедуру в два этапа: сначала извлекается адрес полей из упакованного объекта (это называется <em>распаковкой</em> (unboxing)), а затем значения полей копируются из кучи в экземпляр значимого типа, находящийся в стеке.</p><p>Распаковка не является точной противоположностью упаковки. Она менее ресурсозатратна, так как состоит только в получении указателя на исходный значимый тип, содержащийся в объекте. Указатель ссылается на неупакованную часть упакованного экземпляра (поля без дополнительных блоков) и никакого копирования при распаковке (в отличие от упаковки) не требуется. Однако после распаковки обычно выполняется копирование полей.</p><p>При распаковке может происходить следующее:</p><ol><li>NullReferenceException, если переменная, содержащая ссылку на упакованный значимый тип, равна null.</li><li>InvalidCastException, если ссылка указывает на объект, не являющийся упакованным значением требуемого типа (CLR позволяет распаковку в nullable версию типа).</li></ol><p>Распаковка не включает в себя приведение типов, поэтому, если типы не совпадают, необходимо отдельное приведение.</p><p>Если необходимо изменить значения полей упакованного объекта, то нужно распаковать его, скопировать все поля, изменить значения и снова упаковать. Это значительно сказывается на производительности.</p><p>Многие методы из FCL часто написаны с применением перегрузок под конкретные примитивные типы, чтобы сократить потенциальное число упаковок. При написании собственных классов стоит подумать над обобщениями, которые бы принимали значимый тип, не требуя упаковки.</p><p>Последнее, что касается упаковки: если известно, что код будет периодически заставлять компилятор выполнять упаковку, то стоит сделать это вручную и далее оперировать ссылкой на упакованный объект.</p><p>Простое правило: если нужна ссылка на экземпляр значимого типа, этот экземпляр должен быть упакован. Обычно упаковка выполняется, когда необходимо передать значимый тип в метод, где требуется ссылочный. Но бывают и другие ситуации.</p><p>Так как у значимых типов нет блока синхронизации, то не может быть и нескольких потоков, синхронизирующих свой доступ к экземпляру (например, инструкция <code>lock</code> языка C#).</p><p>Хотя неупакованные значимые типы не имеют указателя на объект-тип, всё равно можно вызвать виртуальные методы (<code>Equals()</code>, <code>GetHashCode()</code> или <code>ToString()</code>), унаследованные или переопределённые этим типом. Если значимый тип переопределяет один из этих виртуальных методов, тогда CLR может вызвать его невиртуально, потому что значимые типы запечатаны. В данном случае экземпляр значимого типа не упаковывается. Но если переопределение вызывает реализацию метода из базового класса, тогда экземпляр значимого типа будет упакован, чтобы в указателе <code>this</code> базового метода передавалась ссылка на объект в куче.</p><p>Вместе с тем вызов невиртуального унаследованного метода (<code>GetType()</code> или <code>MemberwiseCLone()</code>) всегда требует упаковки значимого типа, так как эти методы определены в <code>System.Object</code>, поэтому методы ожидают, что в аргументе <code>this</code> передастся ссылка на объект в куче. Кроме того, приведение неупакованного экземпляра значимого типа к одному из интерфейсов этого типа требует, чтобы экземпляр был упакован, так как интерфейсные переменные всегда должны содержать ссылку на объект в куче.</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>

<span class="token keyword">internal</span> <span class="token keyword">struct</span> <span class="token class-name">Point</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IComparable</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Int32</span> m_x<span class="token punctuation">,</span> m_y<span class="token punctuation">;</span>

    <span class="token comment">// Конструктор, просто инициализирующий поля</span>
    <span class="token keyword">public</span> <span class="token function">Point</span><span class="token punctuation">(</span><span class="token class-name">Int32</span> x<span class="token punctuation">,</span> <span class="token class-name">Int32</span> y<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        m_x <span class="token operator">=</span> x<span class="token punctuation">;</span>
        m_y <span class="token operator">=</span> y<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Переопределяем метод ToString, унаследованный от System.ValueType</span>
    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name">String</span> <span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// Возвращаем Point как строку (вызов ToString предотвращает упаковку)</span>
        <span class="token keyword">return</span> String<span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">&quot;({0}, {1})&quot;</span><span class="token punctuation">,</span> m_x<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> m_y<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Безопасная в отношении типов реализация метода CompareTo</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">Int32</span> <span class="token function">CompareTo</span><span class="token punctuation">(</span><span class="token class-name">Point</span> other<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// Используем теорему Пифагора для определения точки, наиболее удаленной от начала координат (0, 0)</span>
        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">Sign</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">Sqrt</span><span class="token punctuation">(</span>m_x <span class="token operator">*</span> m_x <span class="token operator">+</span> m_y <span class="token operator">*</span> m_y<span class="token punctuation">)</span> <span class="token operator">-</span> Math<span class="token punctuation">.</span><span class="token function">Sqrt</span><span class="token punctuation">(</span>other<span class="token punctuation">.</span>m_x <span class="token operator">*</span> other<span class="token punctuation">.</span>m_x <span class="token operator">+</span> other<span class="token punctuation">.</span>m_y <span class="token operator">*</span> other<span class="token punctuation">.</span>m_y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Реализация метода CompareTo интерфейса IComparable</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">Int32</span> <span class="token function">CompareTo</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> o<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;o is not a Point&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// Вызов безопасного в отношении типов метода CompareTo</span>
        <span class="token keyword">return</span> <span class="token function">CompareTo</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Point<span class="token punctuation">)</span> o<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Program</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// Создаем в стеке два экземпляра Point</span>
        <span class="token class-name">Point</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Point</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Point</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Point</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// p1 НЕ пакуется для вызова ToString (виртуальный метод)</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;(10, 10)&quot;</span>

        <span class="token comment">// p1 ПАКУЕТСЯ для вызова GetType (невиртуальный метод)</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;Point&quot;</span>

        <span class="token comment">// p1 НЕ пакуется для вызова CompareTo</span>
        <span class="token comment">// p2 НЕ пакуется, потому что вызван CompareTo(Point)</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span><span class="token function">CompareTo</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;-1&quot;</span>

        <span class="token comment">// p1 пакуется, а ссылка размещается в c</span>
        <span class="token class-name">IComparable</span> c <span class="token operator">=</span> p1<span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;Point&quot;</span>

        <span class="token comment">// p1 НЕ пакуется для вызова CompareTo</span>
        <span class="token comment">// Поскольку в CompareTo не передается переменная Point, вызывается CompareTo(Object), которому нужна ссылка на упакованный Point</span>
        <span class="token comment">// c НЕ пакуется, потому что уже ссылается на упакованный Point</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span><span class="token function">CompareTo</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;0&quot;</span>

        <span class="token comment">// c НЕ пакуется, потому что уже ссылается на упакованный Point</span>
        <span class="token comment">// p2 ПАКУЕТСЯ, потому что вызывается CompareTo(Object)</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">CompareTo</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// &quot;-1&quot;</span>

        <span class="token comment">// c пакуется, а поля копируются в p2</span>
        p2 <span class="token operator">=</span> <span class="token punctuation">(</span>Point<span class="token punctuation">)</span> c<span class="token punctuation">;</span>

        <span class="token comment">// Убеждаемся, что поля скопированы в p2</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>p2<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// &quot;(10, 10)&quot;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="изменение-полеи-в-упакованных-типах-посредством-интерфеисов-и-почему-этого-лучше-не-делать" tabindex="-1"><a class="header-anchor" href="#изменение-полеи-в-упакованных-типах-посредством-интерфеисов-и-почему-этого-лучше-не-делать"><span>Изменение полей в упакованных типах посредством интерфейсов (и почему этого лучше не делать)</span></a></h3><p>Значимые типы должны быть неизменяемыми, так как при упаковке и последующей распаковке может происходить неожиданное поведение, связанное со ссылками в управляемую кучу. Значимые типы могут быть полезными, если знать, как ими пользоваться.</p><h3 id="равенство-и-тождество-объектов" tabindex="-1"><a class="header-anchor" href="#равенство-и-тождество-объектов"><span>Равенство и тождество объектов</span></a></h3><p>Для <code>System.Object</code> метод <code>Equals()</code> работает достаточно просто: метод сравнивает ссылки, то есть реализует проверку на тождество.</p><p>Правильная реализация метода <code>Equals()</code> должна действовать следующим образом:</p><ol><li>Если аргумент равен null, вернуть false.</li><li>Если аргументы ссылаются на один и тот же объект, вернуть true.</li><li>Если аргументы ссылаются на объекты разного типа, вернуть false.</li><li>Сравнить все определённые в типе экземплярные поля объектов. Если хотя бы одна пара не равна, то вернуть false.</li><li>Вызвать метод <code>Equals()</code> базового класса, чтобы сравнить определённые в нём поля. Если метод вернул false, то тоже вернуть false.</li></ol><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Object</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token return-type class-name">Boolean</span> <span class="token function">Equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// Сравниваемый объект не может быть равным null</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

        <span class="token comment">// Объекты разных типов не могут быть равны</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> obj<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

        <span class="token comment">// Если типы объектов совпадают, возвращаем true при условии, что все их поля попарно равны.</span>
        <span class="token comment">// Так как в System.Object не определены поля, следует считать, что поля равны</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Однако при написании собственных типов метод <code>Equals()</code> переопределяется и его уже нельзя использовать для проверки на тождественность. Для исправления ситуации в типе <code>Object</code> предусмотрен статический метод <code>ReferenceEquals()</code>.</p><p>В базовом классе всех значимых типов метод корректно переопределён и проверяет именно равенство, а не тождественность. Внутренняя реализация метода работает по следующей схеме:</p><ol><li>Если аргумент равен null, вернуть false.</li><li>Если аргументы ссылаются на объекты разного типа, вернуть false.</li><li>Сравнить все определённые в типе экземплярные поля объектов. Если хотя бы одна пара не равна, то вернуть false.</li><li>Вернуть true, так как одноимённый метод из Object не вызывается.</li></ol><p>Для реализации пункта 3 используется отражение (рефлексия). Так как она работает медленно, то стоит написать свою реализацию. Конечно, из этой реализации не стоит вызывать метод базового класса.</p><p>При переопределении метода для предсказуемости поведения стоит обеспечить поддержку четырёх характеристик:</p><ul><li><strong>Рефлективность.</strong> x.Equals(x) должно возвращать true.</li><li><strong>Симметричность.</strong> x.Equals(y) должно быть равно y.Equals(x).</li><li><strong>Транзитивность.</strong> Если x.Equals(y) равно true и y.Equals(z) равно true, то и x.Equals(z) равно true.</li><li><strong>Постоянство.</strong> Если в двух сравниваемых значениях не произошло изменений, то результат сравнения не должен измениться.</li></ul><p>При переопределении может потребоваться выполнить несколько дополнительных условий:</p><ul><li><strong>Реализовать в типе метод Equals() интерфейса System.IEquatable&lt;T&gt;.</strong> Этот обобщённый интерфейс позволяет определить безопасный в отношении типов метод.</li><li><strong>Перегрузить операторы == и !=.</strong></li></ul><p>Если предполагается сравнивать экземпляры для сортировки, то стоит также реализовать метод CompareTo() типа System.IComparable и безопасный в отношении типов метод CompareTo() типа System.IComparable&lt;T&gt;.</p><h2 id="хеш-коды-объектов" tabindex="-1"><a class="header-anchor" href="#хеш-коды-объектов"><span>Хеш-коды объектов</span></a></h2><p>Виртуальный метод <code>GetHashCode()</code>, позволяющий вычислить для любого объекта целочисленный хеш-код, является очень удобной возможностью для добавления в хеш-таблицы экземпляров любых типов.</p><p>При переопределении только одного метода из двух (<code>Equals()</code> и <code>GetHashCode()</code>) компилятор выдаст предупреждение. Причина состоит в том, что реализация хеш-таблиц, словарей и любых других коллекций в C# требует, чтобы два равных объекта имели одинаковые значения хеш-кодов. Для этого необходимо обеспечить соответствие алгоритмов.</p><p>При выборе алгоритма вычисления хеш для своего типа стоит следовать определённым правилам:</p><ul><li>Использовать алгоритм, дающий случайное распределение, что повышает производительность хеш-таблицы.</li><li>Алгоритм может использовать алгоритм базового типа и использовать возвращаемое им значение, однако от этого лучше отказаться, так как эти реализации обладают низкой производительностью.</li><li>В алгоритме должно использоваться как минимум одно экземплярное поле.</li><li>Поля, используемые в алгоритме, в идеале должны быть неизменяемыми.</li><li>Алгоритм должен быть максимально быстрым.</li><li>Объекты с одинаковым значением должны возвращать одинаковые коды.</li></ul><p>Реализация алгоритма по умолчанию ничего не знает о производных типах, поэтому просто возвращает число, которое однозначно идентифицирует объект в пределах домена. При этом гарантируется, что число не изменится за время жизни объекта.</p><h2 id="примитивныи-тип-данных-dynamic" tabindex="-1"><a class="header-anchor" href="#примитивныи-тип-данных-dynamic"><span>Примитивный тип данных dynamic</span></a></h2><p>Язык C# обеспечивает безопасность типов данных: все выражения вычисляются в экземпляр типа, и компилятор генерирует только тот код, который правомерен для данного типа. Это позволяет заметить ошибки ещё на этапе компиляции и ускорить приложение.</p><p>Однако иногда бывают ситуации (когда приложение взаимодействует с компонентами, написанными на языках с динамической типизацией), когда тип заранее не известен. В этом случае типобезопасный код становится громоздким и медленным.</p><p>Для облегчения подобной разработки C# предлагает помечать типы как <em>динамические</em> (dynamic). Также можно записывать результаты вычисления в переменную, помеченную как dynamic? затем динамическая переменная может быть использована для вызова её полей. В этом случае компилятор создаёт специальный IL-код, который описывает желаемую операцию. Этот код называется <em>полезной нагрузкой</em> (payload). Во время выполнения он определяет существующую операцию для выполнения на основе действительного типа объекта.</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">internal</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">DynamicDemo</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">dynamic</span></span> <span class="token keyword">value</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Int32</span> demo <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> demo <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> demo<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">value</span> <span class="token operator">=</span> <span class="token punctuation">(</span>demo <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">?</span> <span class="token punctuation">(</span><span class="token keyword">dynamic</span><span class="token punctuation">)</span> <span class="token number">5</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token keyword">dynamic</span><span class="token punctuation">)</span> <span class="token string">&quot;A&quot;</span><span class="token punctuation">;</span>
            <span class="token keyword">value</span> <span class="token operator">=</span> <span class="token keyword">value</span> <span class="token operator">+</span> <span class="token keyword">value</span><span class="token punctuation">;</span>
            <span class="token function">M</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">M</span><span class="token punctuation">(</span><span class="token class-name">Int32</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span> Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;M(Int32): &quot;</span> <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">M</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span> Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;M(String): &quot;</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>После выполнения метода Main получается следующий результат:</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token function">M</span><span class="token punctuation">(</span>Int32<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token number">10</span>
<span class="token function">M</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span><span class="token punctuation">:</span> AA
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Когда тип поля, параметр метода, возвращаемый тип метола или локальная переменная снабжается пометкой <code>dynamic</code>, компилятор конвертирует этот тип в тип <code>System.Object</code> и применяет к экземпляру <code>System.Runtime.CompilerServices.DynamicAttribute</code> к полю, параметру или возвращаемому типу в метаданных, но не к локальной переменной, потому что переменная используется только внутри метода. Из-за того, что на уровне IL-кода <code>dynamic</code> компилируется в <code>object</code>, нельзя создать перегрузки методов, которые бы отличались только этими типами.</p><p>Любое выражение может быть явно приведено к типу <code>dynamic</code>. Компилятор также разрешает неявное приведение типа <code>dynamic</code> к другому типу. Если тип не приводим, то на этапе компиляции будет вызвано <code>InvalidCastException</code>.</p><p>Преимущество <code>dynamic</code> перед <code>object</code> состоит в том, что использование <code>dynamic</code> значительно упрощает код и позволяет избавиться от упаковки, так как тип будет разрешён на этапе выполнения программы. Однако именно это и является минусом, так как подобное поведение может привести к ряду исключений.</p><p>Код полезной нагрузки, который генерируется на этапе компиляции использует класс, известный как <em>компоновщик</em> (runtime binder). Различные языки программирования определяют различные компоновщики.</p><p>При выполнении кода полезной нагрузки, который генерирует динамический код во время выполнения, этот код окажется в сборке, названной <em>анонимной сборкой динамических методов</em> (Anonymously Hosted Dynamic Methods Assembly). Назначение этого кода заключается в повышении производительности динамических ссылок в ситуациях, в которых конкретное место вызова выдаёт много вызовов с динамическими аргументами, соответствующих одному типу на этапе выполнения.</p><p>Если динамический код используется только в паре мест, разумнее придерживаться старого подхода: либо использовать рефлексию, либо вручную приводить типы.</p><p>Одно из ограничений динамических типов заключается в том, что они могут использоваться только для обращения к членам экземпляров, потому что динамическая переменная должна ссылаться на объект. Однако иногда бывает полезно динамически вызывать статические методы типа, определяемого во время выполнения. Для этих целей можно создать класс с использованием рефлексии (прим. подробный пример есть в книге).</p>`,71);function m(v,b){const t=p("ExternalLinkIcon");return c(),o("div",null,[u,s("p",null,[n("Если бы все типы были ссылочными, эффективность приложения бы резко упала из-за постоянного выделения и очищения памяти в куче. Поэтому для ускорения обработки простых, часто используемых типов CLR предлагает облегчённые типы - "),d,n(". Экземпляры этих типов обычно размещаются в стеке (хотя могут быть встроены и в объект ссылочного типа). В представляющей экземпляр переменной нет указателя на экземпляр, поля размещаются в самой переменной, поэтому не нужно выполнять "),s("a",r,[n("разыменование (dereference)"),l(t)]),n(". Благодаря тому, что экземпляры значимых типов не обрабатываются сборщиком мусора, уменьшается интенсивность работы с управляемой кучей и сокращается количество сборок.")]),k])}const g=e(i,[["render",m],["__file","ch05_PrimitiveRefValType.html.vue"]]),h=JSON.parse('{"path":"/ru/chapters/ch05_PrimitiveRefValType.html","title":"Примитивные, ссылочные и значимые типы","lang":"ru-RU","frontmatter":{},"headers":[{"level":2,"title":"Примитивные типы в языках программирования","slug":"примитивные-типы-в-языках-программирования","link":"#примитивные-типы-в-языках-программирования","children":[{"level":3,"title":"Проверяемые и непроверяемые операции для примитивных типов","slug":"проверяемые-и-непроверяемые-операции-для-примитивных-типов","link":"#проверяемые-и-непроверяемые-операции-для-примитивных-типов","children":[]}]},{"level":2,"title":"Ссылочные и значимые типы","slug":"ссылочные-и-значимые-типы","link":"#ссылочные-и-значимые-типы","children":[{"level":3,"title":"Как CLR управляет размещением полей для типа","slug":"как-clr-управляет-размещением-полеи-для-типа","link":"#как-clr-управляет-размещением-полеи-для-типа","children":[]}]},{"level":2,"title":"Упаковка и распаковка значимых типов","slug":"упаковка-и-распаковка-значимых-типов","link":"#упаковка-и-распаковка-значимых-типов","children":[{"level":3,"title":"Изменение полей в упакованных типах посредством интерфейсов (и почему этого лучше не делать)","slug":"изменение-полеи-в-упакованных-типах-посредством-интерфеисов-и-почему-этого-лучше-не-делать","link":"#изменение-полеи-в-упакованных-типах-посредством-интерфеисов-и-почему-этого-лучше-не-делать","children":[]},{"level":3,"title":"Равенство и тождество объектов","slug":"равенство-и-тождество-объектов","link":"#равенство-и-тождество-объектов","children":[]}]},{"level":2,"title":"Хеш-коды объектов","slug":"хеш-коды-объектов","link":"#хеш-коды-объектов","children":[]},{"level":2,"title":"Примитивный тип данных dynamic","slug":"примитивныи-тип-данных-dynamic","link":"#примитивныи-тип-данных-dynamic","children":[]}],"git":{"updatedTime":1712405766000},"filePathRelative":"ru/chapters/ch05_PrimitiveRefValType.md"}');export{g as comp,h as data};
