import{_ as n,o as s,c as e,e as a}from"./app-IxoMmWNN.js";const o={},c=a(`<h1 id="перечислимые-типы-и-битовые-флаги" tabindex="-1"><a class="header-anchor" href="#перечислимые-типы-и-битовые-флаги"><span>Перечислимые типы и битовые флаги</span></a></h1><h2 id="перечислимые-типы" tabindex="-1"><a class="header-anchor" href="#перечислимые-типы"><span>Перечислимые типы</span></a></h2><p><em>Перечислимым</em> (enumerated type) называют тип, в котором описан набор пар, состоящий из символьных имён и значений. Например:</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">internal</span> <span class="token keyword">enum</span> <span class="token class-name">Color</span>
<span class="token punctuation">{</span>
 White<span class="token punctuation">,</span> <span class="token comment">// Присваивается значение 0</span>
 Red<span class="token punctuation">,</span> <span class="token comment">// Присваивается значение 1</span>
 Green<span class="token punctuation">,</span> <span class="token comment">// Присваивается значение 2</span>
 Blue<span class="token punctuation">,</span> <span class="token comment">// Присваивается значение 3</span>
 Orange <span class="token comment">// Присваивается значение 4</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Можно явно написать в коде числовые значения, однако у перечислений есть два преимущества:</p><ul><li>Программу с использованием перечислений проще читать, писать и сопровождать.</li><li>Перечислимые типы подвергаются строгой проверке типов.</li></ul><p>В CLR перечислимые типы не просто идентификаторы, но они играют важную роль в системе типов. Каждый перечислимый тип напрямую наследуется от типа <code>System.Enum</code>, производного от <code>System.ValueType</code>, который наследуется от <code>System.Object</code>. Перечислимые типы относятся к значимым типам и могут быть как в неупакованной, так и упакованной формах. Однако в отличие от других значимых типов у перечисления не может быть методов (а также свойств и событий). При компиляции перечислимого типа каждый идентификатор превращается в константное поле типа:</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">internal</span> <span class="token keyword">struct</span> <span class="token class-name">Color</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">System<span class="token punctuation">.</span>Enum</span></span>
<span class="token punctuation">{</span>
 <span class="token comment">// Далее перечислены открытые константы, определяющие символьные имена и значения</span>
 <span class="token keyword">public</span> <span class="token keyword">const</span> <span class="token class-name">Color</span> White <span class="token operator">=</span> <span class="token punctuation">(</span>Color<span class="token punctuation">)</span> <span class="token number">0</span><span class="token punctuation">;</span>
 <span class="token keyword">public</span> <span class="token keyword">const</span> <span class="token class-name">Color</span> Red <span class="token operator">=</span> <span class="token punctuation">(</span>Color<span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">;</span>
 <span class="token keyword">public</span> <span class="token keyword">const</span> <span class="token class-name">Color</span> Green <span class="token operator">=</span> <span class="token punctuation">(</span>Color<span class="token punctuation">)</span> <span class="token number">2</span><span class="token punctuation">;</span>
 <span class="token keyword">public</span> <span class="token keyword">const</span> <span class="token class-name">Color</span> Blue <span class="token operator">=</span> <span class="token punctuation">(</span>Color<span class="token punctuation">)</span> <span class="token number">3</span><span class="token punctuation">;</span>
 <span class="token keyword">public</span> <span class="token keyword">const</span> <span class="token class-name">Color</span> Orange <span class="token operator">=</span> <span class="token punctuation">(</span>Color<span class="token punctuation">)</span> <span class="token number">4</span><span class="token punctuation">;</span>

 <span class="token comment">// Далее находится открытое поле экземпляра со значением переменной Color</span>
 <span class="token comment">// Код с прямой ссылкой на этот экземпляр невозможен</span>
 <span class="token keyword">public</span> <span class="token class-name">Int32</span> value__<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Перечислимый тип - обычная структура с набором константных полей и одним экземплярным полем. Константные поля попадают в метаданные сборки, откуда их можно извлечь через рефлексию. То есть в период выполнения можно получить все идентификаторы и их значения, а также преобразовать строковый идентификатор в числовое значение. Однако все те же операции предоставлены базовом типом <code>System.Enum</code>, который предлагает статические и экземплярные методы, выполняющие специальные операции над экземплярами перечислимых типов.</p><p>Описанные перечислимым типов символы являются константами. Встречая в коде символическое имя перечислимого типа, компилятор заменяет его на числовое значение. То есть сама сборка с перечислимым типом может даже не понадобиться, если в коде не будет ссылок на сам перечислимый тип, а не на его значения. Однако именно это порождает проблему версий, связанная с необходимостью перекомпиляции исходного кода при изменениях в сборке с перечислимым типом.</p><p>Для <code>System.Enum</code> существует статический метод <code>GetUnderlyingType()</code>, а для <code>System.Type</code> - экземплярный метод <code>GetEnumUnderlyingType()</code>. Оба этих метода возвращают базовый тип, используемый для хранения значений перечислимого типа. В основе любого перечисления лежит один из целочисленных примитивных типов. Все эти примитивные типы имеют аналоги в FCL, однако компилятор пропускает только примитивный тип.</p><p>Компилятор считает перечисления примитивным типам, поэтому к ним можно применяться стандартные операторы. Операторы применяются к полю <code>value__</code> экземпляра перечисления, а компилятор C# допускает приведение экземпляров одного перечислимого типа к другому. Также поддерживается явное и неявное приведение.</p><p>Имеющийся экземпляр перечислимого типа можно связать со строковым представлением, через вызов <code>ToString()</code> (возможно применение форматирования), унаследованный от <code>System.Enum</code>. Помимо <code>ToString()</code> для перечисления доступен статический метод <code>Format()</code>, служащий для форматирования значений перечислимого типа. В общем случае <code>ToString()</code> удобнее, но <code>Format()</code> статический, что позволяет вызывать его без наличия экземпляра перечислимого типа.</p><p>Можно объявить перечисление, где различные идентификаторы соответствуют одинаковым числовым значениям. В процессе преобразования числа в символьное значение методы форматирования вернут один из символов, правда, неизвестно какой. Если соответствие не найдено, то вернётся числовое значение.</p><p>Статический метод <code>System.Enum.GetValues()</code> и метод <code>GetEnumValues()</code> экземпляра <code>System.Type</code> создают массив, элементами которого являются символьные имена перечислений. И каждый элемент содержит соответствующее числовое значение. Помимо этого, существует обобщённый метод <code>GetEnumValues&lt;T&gt;()</code>, который улучшает типобезопасность и возвращает массив перечислимого типа, благодаря чему отпадает необходимость в явном приведении, так как необобщённый метод возвращает <code>System.Array</code>.</p><p>Чаще всего символьные имена перечислимых типов отображаются с помощью метода <code>ToString()</code> с использованием общего формата (если выводимые строки не требуют локализации, которую не поддерживают перечислимые типы).</p><p>Помимо рассмотренных ранее методов существуют ещё некоторые:</p><ul><li>Методы для получения строкового представления числового значения: <ul><li><code>public static String GetName(Type enumType, Object value);</code> - Определен в System.Enum</li><li><code>public String GetEnumName(Object value);</code> - Определен в System.Type</li></ul></li><li>Методы для получения массива строк (по одной на каждое символьное имя из перечисления): <ul><li><code>public static String[] GetNames(Type enumType);</code> - Определен в System.Enum</li><li><code>public String[] GetEnumNames();</code> - Определен в System.Type</li></ul></li><li>Методы для определения значения, соответствующего символьному идентификатору (все определены в <code>System.Enum</code>): <ul><li><code>public static Object Parse(Type enumType, String value);</code></li><li><code>public static Object Parse(Type enumType, String value, Boolean ignoreCase);</code></li><li><code>public static Boolean TryParse&lt;TEnum&gt;(String value, out TEnum result) where TEnum: struct;</code></li><li><code>public static Boolean TryParse&lt;TEnum&gt;(String value, Boolean ignoreCase, out TEnum result) where TEnum : struct;</code></li></ul></li><li>Методы для допустимости числового значения для данного перечислимого типа (в случае недопустимости стоит выбрасывать <code>ArgumentOutOfRangeException</code>): <ul><li><code>public static Boolean IsDefined(Type enumType, Object value);</code> - Определен в System.Enum</li><li><code>public Boolean IsEnumDefined(Object value);</code> - Определен в System.Type</li></ul></li></ul><p>Метод <code>IsDefined()</code> стоит использовать с осторожностью. Во-первых, он выполняет поиск с учётом регистра. Во-вторых, работает крайне медленно, так как использует отражение. Для проверки допустимости значения для перечислимого типа стоит определить собственный метод. Кроме того, метод работает только для перечислений, определённых в той же сборке, из которой вызывается.</p><p>Наконец, стоит упомянуть несколько статических методов, преобразующих целочисленные примитивные типы в экземпляры примитивного типа.</p><p>Перечислимые типы всегда применяют в сочетании с другим типом, например, в качестве параметров методов или возвращаемых значений методов, свойств или полей. В FCL перечислимые типы часто определяются на уровне класса, которым используются, чтобы их было проще найти, поэтому, при отсутствии конфликта имён лучше делать именно так.</p><h2 id="битовые-флаги" tabindex="-1"><a class="header-anchor" href="#битовые-флаги"><span>Битовые флаги</span></a></h2><p>В FCL есть специальный тип <code>FileAttributes</code>, где каждый разряд соответствует какому-то атрибуту файла. Данный тип описан следующим образом:</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Flags</span><span class="token punctuation">,</span> <span class="token class-name">Serializable</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">FileAttributes</span>
<span class="token punctuation">{</span>
 ReadOnly <span class="token operator">=</span> <span class="token number">0x0001</span><span class="token punctuation">,</span>
 Hidden <span class="token operator">=</span> <span class="token number">0x0002</span><span class="token punctuation">,</span>
 System <span class="token operator">=</span> <span class="token number">0x0004</span><span class="token punctuation">,</span>
 Directory <span class="token operator">=</span> <span class="token number">0x0010</span><span class="token punctuation">,</span>
 Archive <span class="token operator">=</span> <span class="token number">0x0020</span><span class="token punctuation">,</span>
 Device <span class="token operator">=</span> <span class="token number">0x0040</span><span class="token punctuation">,</span>
 Normal <span class="token operator">=</span> <span class="token number">0x0080</span><span class="token punctuation">,</span>
 Temporary <span class="token operator">=</span> <span class="token number">0x0100</span><span class="token punctuation">,</span>
 SparseFile <span class="token operator">=</span> <span class="token number">0x0200</span><span class="token punctuation">,</span>
 ReparsePoint <span class="token operator">=</span> <span class="token number">0x0400</span><span class="token punctuation">,</span>
 Compressed <span class="token operator">=</span> <span class="token number">0x0800</span><span class="token punctuation">,</span>
 Offline <span class="token operator">=</span> <span class="token number">0x1000</span><span class="token punctuation">,</span>
 NotContentIndexed <span class="token operator">=</span> <span class="token number">0x2000</span><span class="token punctuation">,</span>
 Encrypted <span class="token operator">=</span> <span class="token number">0x4000</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>В классе <code>Enum</code> имеется метод <code>HasFlag()</code>, определяемый следующим образом: <code>public Boolean HasFlags(Enum flag)</code>, который и определяет наличие флага. Однако использовать его не стоит, потому что он принимает значения типа <code>Enum</code>, а значит, произойдёт упаковка.</p><p>При создании набора комбинируемых друг с другом битовых флагов используют перечисления. Однако несмотря на внешнюю схожесть, перечислимые типы семантически отличаются от битовых флагов. Если в первом случае имеются отдельные числовые значения, то во втором - набор флагов, одни из которых могут быть установлены, а другие нет.</p><p>Определяя битовые флаги, каждому идентификатору стоит явно присвоить числовое значение. Обычно каждому идентификатору соответствует лишь один бит. Часто приходится видеть идентификатор <code>None</code>, значение которого равно 0. Ещё можно определить идентификаторы, представляющие часто используемые комбинации. К каждому перечислимому типу, используемому в качестве флагов, настоятельно рекомендуется применять специализированный атрибут.</p><p>Для работы с битовыми флагами можно использовать все методы, которые применимы к обычным перечислениям. Однако некоторые из них стоит переопределить (например, <code>ToString()</code>, чтобы он возвращал не числовое представление, для которого не сможет найти символьного идентификатора, а их набор идентификаторов для отдельных битовых флагов). Если метод <code>ToString()</code> находит у перечислимого типа атрибут <code>[Flags]</code>, то он действует по следующему алгоритму:</p><ol><li>Получает набор числовых значений, определённых в перечислении, и сортирует их в нисходящем порядке.</li><li>Для каждого значения выполняется операция конъюнкции с экземпляром перечисления. Если результат равен числовому значению, связанная с ним строка добавляется в итоговую строку, соответствующие биты считаются учтёнными и сбрасываются. Операция повторяется до завершения проверки или до сброса всех битов.</li><li>Если после проверки есть несброшенные биты, значит им нельзя сопоставить идентификаторы. Тогда возвращается исходное число.</li><li>Если исходное значение экземпляра не равно нулю, метод возвращает набор символов, разделённых запятой.</li><li>Если в исходном значении был ноль, а в перечислении был такой идентификатор, то он возвращается.</li><li>Если алгоритм доходит до данного шага, то возвращает 0.</li></ol><p>Если перечисление не помечено атрибутом, то похожий результат можно получить, применив к перечислению метод <code>.ToString(&quot;F&quot;)</code>. Если числовое значение содержит бит, для которого нет идентификатора, тогда вернётся десятичное число.</p><p>Идентификаторы могут быть не только степенью двойки, но также шестнадцатеричным значением.</p><p>Можно не только получить символьные представления битовых флагов по числу, но и наоборот, распарсить строку в битовые флаги. Для этого можно воспользоваться статическими методами <code>Enum.Parse()</code> или <code>Enum.TryParse&lt;T&gt;()</code>. При их вызове происходит следующее:</p><ol><li>Удаляются все проблемы из начала и конца строки.</li><li>Если первым символом является цифра, знаки &quot;+&quot; или &quot;-&quot;, тогда строка считается числом и возвращается соответствующий экземпляр перечисления.</li><li>Переданная строка разбивается на разделённые запятыми лексемы, и у каждой лексемы удаляются все пробелы в начале и конце.</li><li>Выполняется поиск каждой лексемы среди символьных значений. Если лексема найдена, тогда её числовое значение путём дизъюнкции присоединяется к результату, иначе возвращается <code>ArgumentException</code> или <code>false</code> в зависимости от метода. Метод переходит к анализу следующей лексемы.</li><li>После обнаружения и проверки всех лексем возвращается результат.</li></ol><p>Для битовых флагов нельзя применять метод <code>IsDefined()</code> по следующим причинам:</p><ul><li>Метод не разбивает строку на лексемы, а ищет её целиком, соответственно, может никогда не найти результат, если в строке несколько лексем.</li><li>После передачи числового значения метод ищет всего лишь один символьный идентификатор. А для битовых флагов вероятность найти то же число крайне мала, и обычно возвращается <code>false</code>.</li></ul><h2 id="добавление-методов-к-перечислимым-типам" tabindex="-1"><a class="header-anchor" href="#добавление-методов-к-перечислимым-типам"><span>Добавление методов к перечислимым типам</span></a></h2><p>Методы нельзя поместить внутрь перечислимых типов, но можно создать <code>методы расширения</code>, которые будут вести себя подобно экземплярным методам. Особенно это актуально для битовых флагов.</p>`,37),p=[c];function l(t,i){return s(),e("div",null,p)}const d=n(o,[["render",l],["__file","ch15_EnumeratedTypes.html.vue"]]),r=JSON.parse('{"path":"/ru/chapters/ch15_EnumeratedTypes.html","title":"Перечислимые типы и битовые флаги","lang":"ru-RU","frontmatter":{},"headers":[{"level":2,"title":"Перечислимые типы","slug":"перечислимые-типы","link":"#перечислимые-типы","children":[]},{"level":2,"title":"Битовые флаги","slug":"битовые-флаги","link":"#битовые-флаги","children":[]},{"level":2,"title":"Добавление методов к перечислимым типам","slug":"добавление-методов-к-перечислимым-типам","link":"#добавление-методов-к-перечислимым-типам","children":[]}],"git":{"updatedTime":1712403629000},"filePathRelative":"ru/chapters/ch15_EnumeratedTypes.md"}');export{d as comp,r as data};
