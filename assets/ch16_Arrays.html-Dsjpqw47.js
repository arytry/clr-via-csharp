import{_ as t,r as p,o,c,a as s,d as n,b as l,e as a}from"./app-IxoMmWNN.js";const i={},u=a(`<h1 id="массивы" tabindex="-1"><a class="header-anchor" href="#массивы"><span>Массивы</span></a></h1><p>Массив представляет собой механизм, позволяющий рассматривать набор элементов как единую коллекцию. CLR поддерживает <em>одномерные</em> (single-dimension), <em>многомерные</em> (multidimension) и <em>нерегулярные</em> (jagged) массивы/ Базовым для всех массивов является абстрактный класс <code>System.Array</code>, производный от <code>System.Object</code>, а значит массивы являются ссылочным типом, хранятся в куче, а переменная в коде содержит не элементы массива, а ссылку на массив.</p><p>Ниже представлен код и визуализация в памяти созданий и изменений массивов различных типов.</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name">Int32<span class="token punctuation">[</span><span class="token punctuation">]</span></span> myIntegers<span class="token punctuation">;</span> <span class="token comment">// Объявление ссылки на массив</span>
myIntegers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Int32</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// Создание массива типа Int32 из 100 элементов</span>

<span class="token class-name">Control<span class="token punctuation">[</span><span class="token punctuation">]</span></span> myControls<span class="token punctuation">;</span> <span class="token comment">// Объявление ссылки на массив</span>
myControls <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Control</span><span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// Создание массива из 50 ссылок на переменную Control</span>

myControls<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Button</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
myControls<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TextBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
myControls<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> myControls<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// Два элемента ссылаются на один объект</span>
myControls<span class="token punctuation">[</span><span class="token number">46</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DataGrid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
myControls<span class="token punctuation">[</span><span class="token number">48</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ComboBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
myControls<span class="token punctuation">[</span><span class="token number">49</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Button</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://github.com/kuzmin-nikita/CLR-via-CSharp/assets/80389873/4f94509c-ce1c-4ec0-b4be-73bf2e37e785" alt="image"></p><p>В данном случае происходит следующее. В первой строке объявляется переменная, которая будет ссылаться на одномерные массив и ей присваивается значение <code>null</code>, так как память пока не выделена. Затем выделяется память под 100 значений и всем им присваивается 0. Помимо элементов здесь этот объект хранит типичные для объекта в куче поля. Адрес данного массива заносится в переменную. Во втором блоке кода создаётся массив из элементов ссылочного типа. Смысл тот же, только вместо нулей элементы массива заполняются <code>null</code>. В третьем блоке кода происходит частичное заполнение массива так, как если бы те же объекты создавались в качестве переменных.</p><p>Согласно CLS? нумерация элементов массива начинается с нуля. Иные варианты нумерации в CLR допускаются, но не приветствуются.</p><p>В массиве всегда присутствует некая дополнительная информация: данные о размерности, типе данных, нижней границе и так далее.</p><p>По возможности нужно ограничиваться созданием одномерных массивов с нулевым начальным индексом (их иногда называют <em>SZ-массивами</em> или <em>векторами</em>). Векторы обеспечивают наилучшую производительность, так как для них используются IL-команды. Однако, можно создавать и многомерные массивы:</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// Создание двухмерного массива типа Double</span>
<span class="token class-name">Double<span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token punctuation">]</span></span> myDoubles <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Double</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// Создание трехмерного массива ссылок на строки</span>
<span class="token class-name">String<span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token punctuation">,</span><span class="token punctuation">]</span></span> myStrings <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">String</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>CLR поддерживает также нерегулярные массивы - массивы массивов. Производительность одномерных нерегулярных массивов с нулевым начальным индексом такая же, как у обычных векторов. Однако обращение к элементам нерегулярного массива означает обращение к двум или более массивам одновременно.</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// Создание одномерного массива из массивов типа Point</span>
<span class="token class-name">Point<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> myPolygons <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Point</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// myPolygons[0] ссылается на массив из 10 экземпляров типа Point</span>
myPolygons<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Point</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// myPolygons[1] ссылается на массив из 20 экземпляров типа Point</span>
myPolygons<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Point</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// myPolygons[2] ссылается на массив из 30 экземпляров типа Point</span>
myPolygons<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Point</span><span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// вывод точек первого многоугольника</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Int32</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> myPolygons<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Length<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>myPolygons<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">x</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>CLR проверяет корректность индексов. При попытках обратиться к элементу с индексом, выходящим за границы, выбрасывается исключение <code>System.Index.OutOfRange</code>, так как доступ к памяти за пределами границ массивов может нарушить безопасность типов и создать брешь в защите, недопустимую для верифицированного кода. Проверка индекса обычно не влияет на скорость, так как происходит заранее перед началом цикла, а не на каждой итерации. Однако эту проверку можно обойти (и увеличить производительность) с помощью небезопасного кода.</p><h2 id="инициализация-элементов-массива" tabindex="-1"><a class="header-anchor" href="#инициализация-элементов-массива"><span>Инициализация элементов массива</span></a></h2><p>Синтаксис C# позволяет объединить операции создания массива и присвоения ему начальных значений:</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name">String<span class="token punctuation">[</span><span class="token punctuation">]</span></span> names <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">String<span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span> <span class="token string">&quot;Aidan&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Grant&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Набор разделённых запятой символов в фигурных скобках называется <em>инициализатором массива</em> (array initializer). Сложность каждого символа может быть произвольной, а в случае многомерного массива инициализатор может оказаться вложенным. Данную операцию можно сократить ещё сильнее с помощью неявной типизации (в данном случае компилятор выбирает наиболее подходящий тип из всех):</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> names <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token string">&quot;Aidan&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Grant&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Однако, нельзя совмещать, например, строки и числа, так как в этом случае компилятор будет считать, что наиболее подходящим типом является <code>object</code>, а значит, необходима упаковка, которую компилятор откажется делать неявно ввиду высоких затрат.</p><p>В качестве бонуса существует вот такая возможность инициализации (в данном случае компилятор не разрешает неявную типизацию):</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name">String<span class="token punctuation">[</span><span class="token punctuation">]</span></span> names <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&quot;Aidan&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Grant&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>В качестве символов инициализатора могут выступать и объекты анонимного типа (в данном случае объекты массива должны быть экземплярами одного и того же анонимного типа):</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> kids <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token punctuation">{</span> Name<span class="token operator">=</span><span class="token string">&quot;Aidan&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> Name<span class="token operator">=</span><span class="token string">&quot;Grant&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="приведение-типов-в-массивах" tabindex="-1"><a class="header-anchor" href="#приведение-типов-в-массивах"><span>Приведение типов в массивах</span></a></h2><p>В CLR для массивов с элементами ссылочного типа допустимо приведение. Для этого массивы должны быть одинаковой размерности и иметь возможность явного или неявного приведения из типа элементов исходного массива в целевой тип. CLR не поддерживает преобразование массивов с элементами значимого типа, однако это можно обойти при помощи метода <code>Array.Copy()</code>, который создаёт новый массив и заполняет его элементами. Если при попытках приведения массивов не совпадают размерности, то компилятор выдаёт ошибку. Если же при приведении не совместимы типы, то ошибки компиляции не будет, но в рантайме можно получить <code>InvalidCastException</code>.</p><p>Метод <code>Array.Copy()</code> выполняет следующее:</p><ul><li>Упаковка элементов значимого типа в элементы ссылочного типа, например, копирование <code>Int32[]</code> в <code>Object[]</code>.</li><li>Распаковка элементов ссылочного типа в элементы значимого типа, например, копирование <code>Object[]</code> в <code>Int32[]</code>.</li><li>Расширение (widening) примитивных значимых типов, например, копирование <code>Int32[]</code> в <code>Double[]</code>.</li><li>Понижающее приведение в случаях, когда совместимость массивов невозможно определить по их типам. Например, можно привести массив типа <code>Object[]</code> в массив типа <code>IFormattable[]</code>, если все объекты в исходном массиве реализуют данный интерфейс.</li></ul><p>FCL достаточно часто использует преимущества метода <code>Array.Copy()</code>. Иногда бывает полезно изменить тип массива, то есть выполнить его <em>ковариацию</em> (array covariance). Однако стоит помнить, что данная операция сказывается на производительности.</p><p>Для копирования есть ещё два метода. Первый - <code>System.Buffer.BlockCopy()</code>, который работает быстрее, чем <code>Array.Copy()</code>, но поддерживает только примитивные типы. Для надёжного копирования стоит использовать метод <code>System.Array.ConstrainedCopy()</code>, который гарантирует, что в случае неудачного копирования данные в исходном массиве не будут повреждены, хотя данный метод не поддерживает упаковку, распаковку и нисходящее приведение.</p><h2 id="базовыи-класс-system-array" tabindex="-1"><a class="header-anchor" href="#базовыи-класс-system-array"><span>Базовый класс System.Array</span></a></h2>`,30),r=s("code",null,"System.Array",-1),d={href:"https://learn.microsoft.com/en-us/dotnet/api/system.array?view=net-8.0",target:"_blank",rel:"noopener noreferrer"},k=a(`<h2 id="реализация-интерфеисов-ienumerable-icollection-и-ilist" tabindex="-1"><a class="header-anchor" href="#реализация-интерфеисов-ienumerable-icollection-и-ilist"><span>Реализация интерфейсов IEnumerable, ICollection и IList</span></a></h2><p>Многие методы работают с коллекциями, поскольку их параметры объявлены как <code>IEnumerable</code>, <code>ICollection</code> или <code>IList</code>. На их место можно передавать и массивы, поскольку все три необобщённых интерфейса реализованы в <code>System.Array</code>. Это обусловлено тем, что интерфейсы интерпретируют любой элемент как экземпляр <code>System.Object</code>.</p><p>Обобщённые версии данных интерфейсов <code>IEnumerable&lt;T&gt;</code>, <code>ICollection&lt;T&gt;</code> и <code>IList&lt;T&gt;</code> не реализованы в <code>System.Array</code>, потому что в этом случае возникают проблемы с многомерными массивами, а также с массивами с ненулевой нижней границей. Вместо этого разработчики CLR пошли на хитрость: при создании одномерного массива с нулевой индексацией CLR автоматически реализует обобщённые интерфейсы, а также три интерфейса для всех базовых типов массива при условии, что типы являются ссылочными. Ситуацию иллюстрирует следующая иерархия:</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">Object</span>
  Array <span class="token punctuation">(</span>необобщенные IEnumerable<span class="token punctuation">,</span> ICollection<span class="token punctuation">,</span> IList<span class="token punctuation">)</span>
    Object<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>IEnumerable<span class="token punctuation">,</span> ICollection<span class="token punctuation">,</span> IList <span class="token class-name">of</span> Object<span class="token punctuation">)</span>
      String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>IEnumerable<span class="token punctuation">,</span> ICollection<span class="token punctuation">,</span> IList <span class="token class-name">of</span> String<span class="token punctuation">)</span>
      Stream<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>IEnumerable<span class="token punctuation">,</span> ICollection<span class="token punctuation">,</span> IList <span class="token class-name">of</span> Stream<span class="token punctuation">)</span>
        FileStream<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>IEnumerable<span class="token punctuation">,</span> ICollection<span class="token punctuation">,</span> IList <span class="token class-name">of</span> FileStream<span class="token punctuation">)</span>
          <span class="token punctuation">.</span>
          <span class="token punctuation">.</span> <span class="token punctuation">(</span>другие массивы ссылочных типов<span class="token punctuation">)</span>
          <span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>В этом случае массив <code>FileStream[] fsArray;</code> наследует интерфейсы базовых классов и может быть передан в методы с такими прототипами:</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">M1</span><span class="token punctuation">(</span><span class="token class-name">IList<span class="token punctuation">&lt;</span>FileStream<span class="token punctuation">&gt;</span></span> fsList<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
<span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">M2</span><span class="token punctuation">(</span><span class="token class-name">ICollection<span class="token punctuation">&lt;</span>Stream<span class="token punctuation">&gt;</span></span> sCollection<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
<span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">M3</span><span class="token punctuation">(</span><span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>Object<span class="token punctuation">&gt;</span></span> oEnumerable<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Но если массив содержит элементы значимого типа, класс, к которому он принадлежит, не будет реализовывать интерфейсы базовых типов.</p><h2 id="передача-и-возврат-массивов" tabindex="-1"><a class="header-anchor" href="#передача-и-возврат-массивов"><span>Передача и возврат массивов</span></a></h2><p>Передавая массив в метод, стоит помнить о том, что на самом деле передаётся ссылка на массив, что означает возможность модификации элементов массива. Этого можно избежать, передавая в качестве аргумента копию. Однако <code>Array.Copy()</code> выполняет поверхностное (shallow) копирование, а это значит, что элементы ссылочного типа скопируются как ссылка на существующие объекты.</p><p>Аналогично, отдельные методы возвращают ссылку на массив. Если есть необходимость, чтобы метод возвращал ссылку на внутренний массив, ассоциированный с полем, то сначала стоит решить, вправе ли вызывающая программа иметь доступ к этому массиву. Как правило, этого делать не стоит. Поэтому лучше вернуть копию этого массива через метод.</p><p>В случае, если метод возвращает пустой массив, результатом может быть ссылка на массив с нулевым числом элементов либо <code>null</code>. Первый вариант предпочтительнее, так как вызывающий код сможет обработать данный результат и не выкинуть NullReferenceException.</p><h2 id="массивы-с-ненулевои-нижнеи-границеи" tabindex="-1"><a class="header-anchor" href="#массивы-с-ненулевои-нижнеи-границеи"><span>Массивы с ненулевой нижней границей</span></a></h2><p>Создать такие массивы можно с использованием статического метода <code>Array.CreateInstance()</code>, который позволяет задавать тип элементов, размерность, нижнюю границу и так далее. Подобные массивы могут быть полезны, когда границы массива являются значениями бизнес-логики (например, года отчётности).</p><h2 id="внутренняя-реализация-массивов" tabindex="-1"><a class="header-anchor" href="#внутренняя-реализация-массивов"><span>Внутренняя реализация массивов</span></a></h2><p>В CLR поддерживаются массивы двух типов:</p><ul><li>Одномерные массивы с нулевым начальным индексов. Иногда их называют <em>SZ-массивами</em> (single-dimensional, zero-based) или <em>векторами</em>.</li><li>Одномерные и многомерные массивы с неизвестным начальным индексом.</li></ul><p>Допустим, создаётся массив строк. Тогда типов одномерного массива с нулевой нижней границей будет <code>System.String[]</code>, а если индексация начинается не с нуля, то тип будет <code>System.String[*]</code>, где <code>*</code> говорит о том, что CLR знает о ненулевой нижней границе. Так как в C# объявить переменную типа <code>String[*]</code> нельзя, то и обращаться к элементам по индексу тоже нельзя. Для этого необходимо использовать методы <code>Array.GetValue()</code> и <code>Array.SetValue()</code>, что сказывается на производительности. Для многомерных массивов всегда выводится тип <code>String[,]</code>, так как во время выполнения CLR рассматривает все многомерные массивы как массивы с ненулевой нижней границей.</p><p>Доступ к SZ-массивам происходит гораздо быстрее по нескольким причинам:</p><ul><li>Для таких массивов существуют специальные команды CLR, которые позволяют JIT-компилятору генерировать оптимизированный код.</li><li>Предполагается, что индексация начинается с нуля и для доступа к любому элементу необходимо выполнить смещение.</li><li>В общем случае компилятор выносит код проверку границ за пределы цикла.</li></ul><p>Для многомерных массивов или массивов с ненулевой нижней границей код проверки и вычисления текущего индекса генерируется для каждой итерации цикла, что и делает их медленнее. Если есть необходимость повысить производительность, то стоит использовать нерегулярные массивы (массивы массивов).</p><p>Кроме того, в C# и CLR возможен доступ к элементам массива при помощи небезопасного (неверифицируемого) кода. В этом случае процедура проверки индекса просто отключается. Данная техника применима только к примитивным структурам, а также к перечислениям. Подробнее о доступе к элементам массива с использованием небезопасного кода в книге (стр. 430).</p><h2 id="небезопасныи-доступ-к-массивам-и-массивы-фиксированного-размера" tabindex="-1"><a class="header-anchor" href="#небезопасныи-доступ-к-массивам-и-массивы-фиксированного-размера"><span>Небезопасный доступ к массивам и массивы фиксированного размера</span></a></h2><p>Небезопасный доступ к массиву является мощным средством, так как даёт возможность работать:</p><ul><li>С элементами управляемого массива.</li><li>С элементами массива в неуправляемой куче (например, <code>SecureString</code>).</li><li>С элементами массива в стеке потока.</li></ul><p>Если производительность критична, управляемый массив можно разместить в стеке при помощи инструкции <code>stackalloc</code> языка C#. В этом случае все элементы массива (и даже вложенные в значимые типы) должны быть значимыми.</p><p>В структуру можно встроить массив при соблюдении следующих условий:</p><ul><li>Тип должен быть структурой.</li><li>Поле или структура, в которой оно определено, должны помечаться модификатором <code>unsafe</code>.</li><li>Поле массива должно быть помечено модификатором <code>fixed</code>.</li><li>Массив должен быть SZ.</li><li>Элементы массива должны быть примитивными структурами.</li></ul>`,27);function m(v,b){const e=p("ExternalLinkIcon");return o(),c("div",null,[u,s("p",null,[n("Все массивы являются производными от "),r,n(", а значит, поддерживают и все его методы (многие из которых являются перегруженными для осуществления контроля типов). Подробнее можно прочитать в "),s("a",d,[n("документации"),l(e)]),n(".")]),k])}const h=t(i,[["render",m],["__file","ch16_Arrays.html.vue"]]),g=JSON.parse('{"path":"/ru/chapters/ch16_Arrays.html","title":"Массивы","lang":"ru-RU","frontmatter":{},"headers":[{"level":2,"title":"Инициализация элементов массива","slug":"инициализация-элементов-массива","link":"#инициализация-элементов-массива","children":[]},{"level":2,"title":"Приведение типов в массивах","slug":"приведение-типов-в-массивах","link":"#приведение-типов-в-массивах","children":[]},{"level":2,"title":"Базовый класс System.Array","slug":"базовыи-класс-system-array","link":"#базовыи-класс-system-array","children":[]},{"level":2,"title":"Реализация интерфейсов IEnumerable, ICollection и IList","slug":"реализация-интерфеисов-ienumerable-icollection-и-ilist","link":"#реализация-интерфеисов-ienumerable-icollection-и-ilist","children":[]},{"level":2,"title":"Передача и возврат массивов","slug":"передача-и-возврат-массивов","link":"#передача-и-возврат-массивов","children":[]},{"level":2,"title":"Массивы с ненулевой нижней границей","slug":"массивы-с-ненулевои-нижнеи-границеи","link":"#массивы-с-ненулевои-нижнеи-границеи","children":[]},{"level":2,"title":"Внутренняя реализация массивов","slug":"внутренняя-реализация-массивов","link":"#внутренняя-реализация-массивов","children":[]},{"level":2,"title":"Небезопасный доступ к массивам и массивы фиксированного размера","slug":"небезопасныи-доступ-к-массивам-и-массивы-фиксированного-размера","link":"#небезопасныи-доступ-к-массивам-и-массивы-фиксированного-размера","children":[]}],"git":{"updatedTime":1712403629000},"filePathRelative":"ru/chapters/ch16_Arrays.md"}');export{h as comp,g as data};
