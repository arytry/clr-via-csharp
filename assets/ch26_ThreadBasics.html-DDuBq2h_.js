import{_ as e,o as l,c as a,e as n}from"./app-IxoMmWNN.js";const i={},s=n('<h1 id="потоки-исполнения" tabindex="-1"><a class="header-anchor" href="#потоки-исполнения"><span>Потоки исполнения</span></a></h1><h2 id="для-чего-windows-поддерживает-потоки" tabindex="-1"><a class="header-anchor" href="#для-чего-windows-поддерживает-потоки"><span>Для чего Windows поддерживает потоки?</span></a></h2><p>На заре компьютерной эры не существовало концепции <em>потоков исполнения</em>; точнее, существовал только один поток. При этом выполнение приложения могло ставить на паузу работу операционной системы.</p><p>Для решения этой проблемы было решено запускать каждый экземпляр приложения в отдельном <em>процессе</em>. Процессом называется набор ресурсов, используемый отдельным экземпляром приложения. Каждому процессу выделяется виртуальное адресное пространство, которое гарантирует изолированность приложений друг от друга.</p><p>Однако, если процессор один, а приложение войдёт в бесконечный цикл, то это всё так же ставит систему в тупик. Для решения этой проблемы были придуманы <em>потоки</em> (threads). Потоки предназначены для виртуализации процессора. Если код войдёт в бесконечный цикл, то блокируется только связанный с этим кодом процесс.</p><h2 id="ресурсоемкость-потоков" tabindex="-1"><a class="header-anchor" href="#ресурсоемкость-потоков"><span>Ресурсоёмкость потоков</span></a></h2><p>Как и любые механизмы виртуализации, потоки потребляют дополнительные ресурсы, требуя памяти и времени (снижая производительность среды выполнения). Каждый поток состоит из нескольких частей:</p><ul><li><strong>Объект ядра потока</strong> (thread kernel object). Операционная система выделяет и инициализирует для каждого созданного к ней потока одну из структур данных, которая описывает поток.</li><li><strong>Блок окружения поток</strong> (Thread Environment Block, TEB). Место в памяти, выделенное и инициализированное в пользовательском режиме (адресное пространство, к которому приложение имеет быстрый доступ). Блок содержит заголовок цепочки обработки исключений, а также локальное хранилище данных для потока.</li><li><strong>Стек пользовательского режима</strong> (user-mode stack). Хранит передаваемые в методы локальные переменные и аргументы. Также содержит адрес, показывающий, откуда начнёт исполнение поток после того, как текущий метод возвратит управление.</li><li><strong>Стек режима ядра</strong> (kernel-mode stack). Используется, когда код приложения передаёт аргументы в функцию операционной системы, находящейся в режиме ядра.</li><li><strong>Уведомления о создании и завершении потоков.</strong> Передаются в каждую загруженную в процесс DLL, чтобы выполнить инициализацию или очистку. Не передаются в DLL управляемых языков, так как они не имеют метода DllMain.</li></ul><p>На самом деле ситуация с производительностью ещё хуже из-за необходимости <em>переключения контекста</em> (context switching). Операционная система должна распределять ресурсы физического процессора между виртуальными. В произвольный момент времени Windows передаёт процессору на исполнение один поток. Этот поток исполняется в течение некоторого временного интервала - <em>такта</em> (quantum). После завершения интервала происходит переключение на другой поток. При этом обязательно происходит следующее:</p><ol><li>Значения регистров процессора исполняющегося в данный момент потока сохраняются в структуре контекста, которая располагается в ядре потока.</li><li>Из набора потоков выделяется тот, которому будет передано управление. Если выбранный поток принадлежит другому процессу, Windows переключает для процессора виртуальное адресное пространство. Только после этого возможно выполнение кода или доступ к данным.</li><li>Значения выбранной структуры контекста потока загружаются в регистры процессора.</li></ol><p>После переключения контекста процессор исполняет выбранный поток, пока не истечёт выделенное потоку время, после чего снова происходит переключение. Windows делает это примерно каждые 30 мс. Никакого выигрыша в производительности или потреблении памяти это не даёт, это требуется для повышения отказоустойчивости, чтобы система могла реагировать на действия конечного пользователя.</p><p>Однако, ситуация с производительностью ещё хуже, так как при работе с одним потоком, его код и данные находятся в кэше процессора. При смене потоков процессор вынужден обратиться к оперативной памяти, чтобы наполнить кэш.</p><p>Иногда в конце такта Windows может продолжить исполнение уже исполняемого потока, при этом переключение контекста не переходит, а быстродействие повышается. Аналогично быстродействие повышается, если поток уступает управление до завершения такта, например, засыпая в ожидании ввода-вывода.</p><p>В ходе сборки мусора CLR приостанавливает все потоки. Таким образом, сокращение количества потоков повысит производительность сборки мусора. Аналогично происходит с отладкой, так как все потоки также останавливаются.</p><h2 id="так-дальше-не-поидет" tabindex="-1"><a class="header-anchor" href="#так-дальше-не-поидет"><span>Так дальше не пойдёт!</span></a></h2><p>Разработчики Windows отдали предпочтение надёжности, поэтому многие приложения создают потоки, вместо процессов, так как создание процессов - дорогостоящая процедура. Однако в результате создаётся множество простаивающих потоков.</p><h2 id="тенденция-развития-процессоров" tabindex="-1"><a class="header-anchor" href="#тенденция-развития-процессоров"><span>Тенденция развития процессоров</span></a></h2><p>Существует три вида многопроцессорных технологий:</p><ul><li><strong>Многопроцессорные решения.</strong> Популярность сходит на нет из-за большого размера и высокой стоимости.</li><li><strong>Гиперпотоковые микросхемы.</strong> Технология Intel, которая позволяет одной микросхеме функционировать как две. Для ОС это выглядит как наличие двух процессоров, и она одновременно планирует поведение двух потоков, выполняя только один из них.</li><li><strong>Многоядерные микросхемы.</strong></li></ul><h2 id="clr-и-windows-потоки" tabindex="-1"><a class="header-anchor" href="#clr-и-windows-потоки"><span>CLR- и Windows-потоки</span></a></h2><p>CLR-потоки аналогичны потокам Windows.</p><h2 id="потоки-для-асинхронных-вычислительных-операции" tabindex="-1"><a class="header-anchor" href="#потоки-для-асинхронных-вычислительных-операции"><span>Потоки для асинхронных вычислительных операций</span></a></h2><p>По возможности для этой цели лучше прибегать к доступному в CLR <em>пулу потоков</em> (thread pool). Однако иногда возможны ситуации, когда явно требуется создать поток для выполнения конкретной вычислительной операции, например, при выполнении кода, приводящего поток в отличное от обычного состояния потока из пула:</p><ul><li>Требуется запустить поток с нестандартным приоритетом.</li><li>Требуется, чтобы поток выполнялся в фоновом режиме, чтобы приложение не закрылось до завершения потоком задания.</li><li>Может возникнуть необходимость преждевременно завершить исполняющий поток.</li></ul><h2 id="причины-использования-потоков" tabindex="-1"><a class="header-anchor" href="#причины-использования-потоков"><span>Причины использования потоков</span></a></h2><p>Потоки используются по двум основным причинам:</p><ul><li><strong>Улучшение времени отклика (обычно для клиентских приложений с графическим интерфейсом).</strong> Это может быть реализовано как для выделения приложения в отдельный поток, так и выделения части приложения в отдельный поток.</li><li><strong>Производительность (для клиентских и серверных приложений).</strong></li></ul><h2 id="планирование-и-приоритеты-потоков" tabindex="-1"><a class="header-anchor" href="#планирование-и-приоритеты-потоков"><span>Планирование и приоритеты потоков</span></a></h2><p>После каждого такта Windows просматривает все существующие ядра потоков в поисках потоков, которые не находятся в режиме ожидания, выбирает один из них и переключается на его контекст.</p><p>Windows называют многопоточной ОС с вытесняющей многозадачностью, так как в произвольный момент времени поток может быть остановлен, а вместо него для выполнения может быть выбран другой.</p><p>Каждому потоку назначается уровень приоритета с нулевого (самого низкого) до 31 (самого высокого). При выборе потока, который будет передан процессору, сначала рассматриваются потоки с самым высоким приоритетом и ставятся в очередь в цикле. При наличии в очереди потоков с приоритетом 31 система никогда не передаст процессору поток с меньшим приоритетом. Это условие называется <em>зависанием</em> (starvation). Зависание реже возникает на многопроцессорных машинах, так как они могут одновременно выполнять потоки с приоритетом 30 и 31. В процессе загрузки система создаёт <em>поток обнуления страниц</em> (zero page thread), которому назначается нулевой приоритет.</p><p>В Windows существует абстрактная прослойка над уровнями приоритетов. Поддерживается шесть классов приоритетов: <code>Idle</code> (холостого хода), <code>Below Normal</code> (ниже обычного), <code>Normal</code> (обычный), <code>Above Normal</code> (выше обычного), <code>High</code> (высокий) и <code>Realtime</code> (реального времени). Кроме того, поддерживается семь относительных приоритетов потоков: <code>Idle</code> (холостого хода), <code>Lowest</code> (самый низкий), <code>Below Normal</code> (ниже обычного), <code>Normal</code> (обычный), <code>Above Normal</code> (выше обычного), <code>Highest</code> (самый высокий) и <code>Time-Critical</code> (требующий немедленной обработки). Соотношений между классом приоритета, относительным приоритетом потока и итоговым уровнем приоритета можно посмотреть в книге.</p><h2 id="фоновые-и-активные-потоки" tabindex="-1"><a class="header-anchor" href="#фоновые-и-активные-потоки"><span>Фоновые и активные потоки</span></a></h2><p>При завершении активных (foreground) потоков в процессе CLR принудительно завершает также все запушенные на этот момент фоновые (background) потоки.</p><h2 id="что-дальше" tabindex="-1"><a class="header-anchor" href="#что-дальше"><span>Что дальше?</span></a></h2><p>...</p>',36),o=[s];function d(r,t){return l(),a("div",null,o)}const h=e(i,[["render",d],["__file","ch26_ThreadBasics.html.vue"]]),p=JSON.parse('{"path":"/ru/chapters/ch26_ThreadBasics.html","title":"Потоки исполнения","lang":"ru-RU","frontmatter":{},"headers":[{"level":2,"title":"Для чего Windows поддерживает потоки?","slug":"для-чего-windows-поддерживает-потоки","link":"#для-чего-windows-поддерживает-потоки","children":[]},{"level":2,"title":"Ресурсоёмкость потоков","slug":"ресурсоемкость-потоков","link":"#ресурсоемкость-потоков","children":[]},{"level":2,"title":"Так дальше не пойдёт!","slug":"так-дальше-не-поидет","link":"#так-дальше-не-поидет","children":[]},{"level":2,"title":"Тенденция развития процессоров","slug":"тенденция-развития-процессоров","link":"#тенденция-развития-процессоров","children":[]},{"level":2,"title":"CLR- и Windows-потоки","slug":"clr-и-windows-потоки","link":"#clr-и-windows-потоки","children":[]},{"level":2,"title":"Потоки для асинхронных вычислительных операций","slug":"потоки-для-асинхронных-вычислительных-операции","link":"#потоки-для-асинхронных-вычислительных-операции","children":[]},{"level":2,"title":"Причины использования потоков","slug":"причины-использования-потоков","link":"#причины-использования-потоков","children":[]},{"level":2,"title":"Планирование и приоритеты потоков","slug":"планирование-и-приоритеты-потоков","link":"#планирование-и-приоритеты-потоков","children":[]},{"level":2,"title":"Фоновые и активные потоки","slug":"фоновые-и-активные-потоки","link":"#фоновые-и-активные-потоки","children":[]},{"level":2,"title":"Что дальше?","slug":"что-дальше","link":"#что-дальше","children":[]}],"git":{"updatedTime":1712403629000},"filePathRelative":"ru/chapters/ch26_ThreadBasics.md"}');export{h as comp,p as data};
