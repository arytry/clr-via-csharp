import{_ as t,r as p,o as c,c as o,a as s,d as n,b as l,e as a}from"./app-IxoMmWNN.js";const i={},u=a(`<h1 id="делегаты" tabindex="-1"><a class="header-anchor" href="#делегаты"><span>Делегаты</span></a></h1><h2 id="знакомство-с-делегатами" tabindex="-1"><a class="header-anchor" href="#знакомство-с-делегатами"><span>Знакомство с делегатами</span></a></h2><p>В .NET функции обратного вызова играют не менее важную роль, чем при неуправляемом программировании. Однако данная платформа предлагает в распоряжение разработчика <em>делегаты</em> (delegates) - механизм, безопасный по отношению к типам.</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">internal</span> <span class="token keyword">delegate</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Feedback</span><span class="token punctuation">(</span><span class="token class-name">Int32</span> <span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Объявление делегата задаёт сигнатуру метода обратного вызова. Далее можно создавать экземпляры данного делегата, передавая в конструктор имена методов с той же сигнатурой. Также можно вызывать делегаты внутри других методов.</p><h2 id="обратныи-вызов-статических-методов" tabindex="-1"><a class="header-anchor" href="#обратныи-вызов-статических-методов"><span>Обратный вызов статических методов</span></a></h2><p>При передаче в метод параметром создаётся делегат, который выступает оболочкой для метода обратного вызова, позволяя выполнить его вызов. Делается это через конструктор делегата <code>Feedback</code>. Возвращённая оператором <code>new</code> ссылка передаётся в качестве аргумента метода, который будет вызывать статический метод.</p><p>Если код одного типа вызывает посредством делегата закрытый член другого типа, проблем с безопасностью или уровнем доступа не возникает, если делегат создан в коде, имеющем нужный уровень доступа.</p><p>При создании делегата компилятор убеждается в том, что сигнатуры передаваемых в конструктор методов совместимы с сигнатурой делегата. В противном случае компилятор выбросит ошибку.</p><p>Как C#, так и CLR поддерживают ковариантность и контравариантность ссылочных типов при привязке метода к делегату. <em>Ковариантность</em> означает, что метод может возвращать тип, производный от типа, возвращаемого делегатом. <em>Контравариантность</em> означает, что метод может принимать тип, являющийся базовым для типа параметра делегата (прим. <em>Всё так же, как и в обобщениях</em>). Стоит заметить, что ковариантность и контравариантность поддерживаются только для ссылочных типов, потому что при использовании значимых типов или <code>void</code> структура памяти меняется, когда для ссылочных типов всегда остаётся указатель. Благо, подобные попытки будут пресекаться компилятором.</p><h2 id="обратныи-вызов-экземплярных-методов" tabindex="-1"><a class="header-anchor" href="#обратныи-вызов-экземплярных-методов"><span>Обратный вызов экземплярных методов</span></a></h2><p>Вызов экземплярных методов схож с вызовом статических методов. Однако при передаче метода в конструктор делегата необходимо создать экземпляр типа и передать метод с указанием экземпляра. В таком случае при обратном вызове метода адрес только что созданного объекта будет передан экземплярному методу в качестве неявного аргумента <code>this</code>. Это означает наличие у объекта состояния, которое может использоваться по время выполнения метода обратного вызова.</p><h2 id="тонкости-использования-делегатов" tabindex="-1"><a class="header-anchor" href="#тонкости-использования-делегатов"><span>Тонкости использования делегатов</span></a></h2><p>На первый взгляд работать с делегатами легко: определяется делегат с помощью ключевого слова <code>delegate</code>, с помощью оператора <code>new</code> создаются экземпляры, а для обратного вызова служит знакомый синтаксис (но используется не имя метода, а переменная, указывающая на делегат).</p><p>На самом деле всё обстоит сложнее, потому что часть сложности скрывается за работой компиляторов и CLR. По факту определение делегата:</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">internal</span> <span class="token keyword">delegate</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Feedback</span><span class="token punctuation">(</span><span class="token class-name">Int32</span> <span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>разворачивается компилятором в полное определение класса (все типы делегатов являются производными от <code>System.MulticastDelegate</code>):</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">internal</span> <span class="token keyword">class</span> <span class="token class-name">Feedback</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">System<span class="token punctuation">.</span>MulticastDelegate</span></span>
<span class="token punctuation">{</span>
  <span class="token comment">// Конструктор</span>
  <span class="token keyword">public</span> <span class="token function">Feedback</span><span class="token punctuation">(</span>Object <span class="token keyword">object</span><span class="token punctuation">,</span> <span class="token class-name">IntPtr</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Метод, прототип которого задан в исходном тексте</span>
  <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token class-name">Int32</span> <span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Методы, обеспечивающие асинхронный обратный вызов</span>
  <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token return-type class-name">IAsyncResult</span> <span class="token function">BeginInvoke</span><span class="token punctuation">(</span><span class="token class-name">Int32</span> <span class="token keyword">value</span><span class="token punctuation">,</span> <span class="token class-name">AsyncCallback</span> callback<span class="token punctuation">,</span> Object <span class="token keyword">object</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">EndInvoke</span><span class="token punctuation">(</span><span class="token class-name">IAsyncResult</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>В основном используются только конструктор и метод <code>Invoke()</code>. Методы <code>BeginInvoke()</code> и <code>EndInvoke()</code> относятся к модели асинхронного программирования .NET Framework, которая признана устаревшей и заменена асинхронными операциями.</p><p>Класс <code>System.MulticastDelegate</code> является производным от <code>System.Delegate</code>, который в свою очередь наследуется от <code>System.Object</code>. Два класса делегатов появились исторически. Однако иногда приходится работать и с делегатами, реализующими методы <code>System.Delegate.Combine()</code> и <code>System.Delegate.Remove()</code>. Этим методам всегда можно передавать определяемый разработчиком делегат, так как они определены в базовом типе.</p><p>Класс делегата может быть закрытым и открытым. Ещё следует помнить, что делегаты можно объявлять как внутри класса, так и в глобальной области видимости. Ниже описаны три самых важных поля <code>MulticastDelegate</code>:</p><table><thead><tr><th>Поле</th><th>Тип</th><th>Описание</th></tr></thead><tbody><tr><td><code>_target</code></td><td><code>System.Object</code></td><td>Поле указывает на значение, которое следует передать параметру <code>this</code> экземплярного метода (для статических методов будет <code>null</code>)</td></tr><tr><td><code>_methodPtr</code></td><td><code>System.IntPtr</code></td><td>Внутреннее целочисленное значение, используемое CLR для идентификации метода обратного вызова</td></tr><tr><td><code>_invocationList</code></td><td><code>System.Object</code></td><td>Обычно <code>null</code>, но может ссылаться на массив делегатов при построении из них цепочки</td></tr></tbody></table><p>В конструктор делегата передаётся ссылка на объект и указатель на метод (получаемый из маркеров метаданных <code>MethodDef</code> или <code>MethodRef</code>). Таким образом, любой делегат - всего лишь обёртка для метода и обрабатываемого этим методом объекта.</p><p><img src="https://github.com/kuzmin-nikita/CLR-via-CSharp/assets/80389873/668d5c57-956f-47fe-baa3-00954e076fa4" alt="image"></p><p>Вызывать делегат можно как через указание имени делегата с передачей аргументов, так и через явный вызов метода <code>Invoke()</code>. Вызывая этот метод, он использует закрытые поля <code>_target</code> и <code>_methodPtr</code> для вызова желаемого метода на заданном объекте.</p><h2 id="обратныи-вызов-нескольких-методов-цепочки-делегатов" tabindex="-1"><a class="header-anchor" href="#обратныи-вызов-нескольких-методов-цепочки-делегатов"><span>Обратный вызов нескольких методов (цепочки делегатов)</span></a></h2><p>Делегаты полезны сами по себе, но ещё более полезными их делает механизм цепочек. <em>Цепочкой</em> (chaining) называется коллекцию делегатов, дающая возможность вызывать все методы, представленные этими делегатами. Далее приводится пример.</p><blockquote><p>Имеется три делегата. Создаётся переменная, которая будет хранить в себе цепочку делегатов и инициализируется <code>null</code>. После того, как в неё добавлен первый делегат, переменная цепочки ссылается на объект в памяти, содержащий первый делегат. При добавлении в цепочку второго делегата в памяти создаётся объект, в поле <code>_invocationList</code> у которого лежит ссылка на массив, состоящий из первого и второго делегата. После добавления третьего делегата в цепочку происходит аналогичная ситуация, однако на объект, который хранил ссылку на массив с двумя предыдущими делегатами, больше не указывает ссылок, и он будет собран при следующей сборке мусора. При удалении делегатов из цепочки происходит обратная ситуация. Ниже три картинки с состоянием памяти для цепочки из одного, двух и трёх делегатов соответственно.</p></blockquote><p><img src="https://github.com/kuzmin-nikita/CLR-via-CSharp/assets/80389873/f9ac08b7-8ed8-4acc-834d-635d6dc85699" alt="image"></p><p><img src="https://github.com/kuzmin-nikita/CLR-via-CSharp/assets/80389873/6a2d4d5a-cbff-4f48-bd1f-33f650843223" alt="image"></p><p><img src="https://github.com/kuzmin-nikita/CLR-via-CSharp/assets/80389873/a4d2cfa9-6641-401a-b8a2-78430780d489" alt="image"></p><p>При передаче цепочки делегатов в качестве аргумента, все отдельные делегаты из цепочки будут вызваны последовательно. Если делегаты возвращают некоторое значение, то вернётся результат вызова последнего делегата.</p><h3 id="поддержка-цепочек-делегатов-c" tabindex="-1"><a class="header-anchor" href="#поддержка-цепочек-делегатов-c"><span>Поддержка цепочек делегатов C#</span></a></h3><p>Компилятор C# автоматически предоставляет перегруженные версии операторов <code>+=</code> и <code>-=</code> для создания цепочки делегатов. Эти перегруженные операторы вызывают всё те же методы <code>Delegate.Combine()</code> и <code>Delegate.Remove()</code>, так что IL-код получается идентичным, отличается лишь читаемости.</p><h3 id="дополнительные-средства-управления-цепочками-делегатов" tabindex="-1"><a class="header-anchor" href="#дополнительные-средства-управления-цепочками-делегатов"><span>Дополнительные средства управления цепочками делегатов</span></a></h3><p>Алгоритм вызова делегатов из цепочки достаточно прост, хотя его хватает для большинства сценариев. Однако у него есть ряд ограничений. Например, сохраняется возвращаемое значение только из последнего делегата. Другим ограничением является то, что, если один из делегатов в цепочке блокируется или выкидывает исключение, выполнение цепочки останавливается.</p><p>Для вызова в явном виде отдельного делегата из цепочки можно использовать метод <code>MulticastDelegate.GetInvokationList()</code>, который возвращает массив ссылок на отдельные делегаты, или ссылку на сам делегат, если поле <code>_invocationList</code> равно <code>null</code>.</p><h2 id="обобщенные-делегаты" tabindex="-1"><a class="header-anchor" href="#обобщенные-делегаты"><span>Обобщённые делегаты</span></a></h2><p>Когда .NET Framework только начинал разрабатываться, в Microsoft ввели понятие делегатов. По мере добавления в FCL классов появлялись и новые типы делегатов. Однако, многие из них были похожи: их сигнатуры были одинаковы, делегаты отличались только именами. По сути, все их можно было свести к одному типу.</p><p>Примерно по этому пути и пошла современная версия фреймворка после введения обобщений. Появилось несколько типов обобщённых делегатов:</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">delegate</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Action</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Этот делегат не обобщенный</span>
<span class="token keyword">public</span> <span class="token keyword">delegate</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token generic-method"><span class="token function">Action</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">T</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">delegate</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token generic-method"><span class="token function">Action</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T1<span class="token punctuation">,</span> T2<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">T1</span> arg1<span class="token punctuation">,</span> <span class="token class-name">T2</span> arg2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">delegate</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token generic-method"><span class="token function">Action</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T1<span class="token punctuation">,</span> T2<span class="token punctuation">,</span> T3<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">T1</span> arg1<span class="token punctuation">,</span> <span class="token class-name">T2</span> arg2<span class="token punctuation">,</span> <span class="token class-name">T3</span> arg3<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token range operator">..</span><span class="token punctuation">.</span>
<span class="token keyword">public</span> <span class="token keyword">delegate</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token generic-method"><span class="token function">Action</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T1<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> T16<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">T1</span> arg1<span class="token punctuation">,</span> <span class="token range operator">..</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token class-name">T16</span> arg16<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">delegate</span> <span class="token return-type class-name">TResult</span> <span class="token generic-method"><span class="token function">Func</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TResult<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">delegate</span> <span class="token return-type class-name">TResult</span> <span class="token generic-method"><span class="token function">Func</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">,</span> TResult<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">T</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">delegate</span> <span class="token return-type class-name">TResult</span> <span class="token generic-method"><span class="token function">Func</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T1<span class="token punctuation">,</span> T2<span class="token punctuation">,</span> TResult<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">T1</span> arg1<span class="token punctuation">,</span> <span class="token class-name">T2</span> arg2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">delegate</span> <span class="token return-type class-name">TResult</span> <span class="token generic-method"><span class="token function">Func</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T1<span class="token punctuation">,</span> T2<span class="token punctuation">,</span> T3<span class="token punctuation">,</span> TResult<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">T1</span> arg1<span class="token punctuation">,</span> <span class="token class-name">T2</span> arg2<span class="token punctuation">,</span> <span class="token class-name">T3</span> arg3<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token range operator">..</span><span class="token punctuation">.</span>
<span class="token keyword">public</span> <span class="token keyword">delegate</span> <span class="token return-type class-name">TResult</span> <span class="token generic-method"><span class="token function">Func</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T1<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> T16<span class="token punctuation">,</span> TResult<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">T1</span> arg1<span class="token punctuation">,</span> <span class="token range operator">..</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token class-name">T16</span> arg16<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Action()</code> является делегатом, который не возвращает значений, а <code>Func()</code> - возвращает (прим. Частным случаем <code>Func()</code> является <code>Predicate()</code>, который возвращает булево значение). В .NET имеется по 17 делегатов каждого типа. Для определения большего числа параметров придётся определять свой собственный делегат, что маловероятно.</p><p>Вместо определения собственных типов делегатов рекомендуется использовать обобщённые, так как это уменьшает количество типов в системе и упрощает код. Однако, если нужно передать аргумент по ссылке с ключевыми словами <code>ref</code> или <code>out</code>, а также в ситуациях, когда требуется использовать <code>params</code>, задать ограничения для аргументов делегата или установить ограничения для аргументов-типов, придётся писать свой собственный делегат.</p><h2 id="упрощенныи-синтаксис-работы-с-делегатами" tabindex="-1"><a class="header-anchor" href="#упрощенныи-синтаксис-работы-с-делегатами"><span>Упрощённый синтаксис работы с делегатами</span></a></h2><p>Многие программисты не любят делегаты из-за достаточно сложного синтаксиса. Например, следующая строка реализует добавление делегата при щелчке по кнопке:</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>button1<span class="token punctuation">.</span>Click <span class="token operator">+=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">EventHandler</span><span class="token punctuation">(</span>button_Click<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Данный делегат нужен среду CLR, чтобы соблюсти безопасность типов, однако программисты хотели бы видеть что-то подобное:</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>button1<span class="token punctuation">.</span>Click <span class="token operator">+=</span> button_Click<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>К счастью, C# предоставляет подобный функционал, пусть он и является всего лишь синтаксическим сахаром.</p><h3 id="упрощение-1-не-создаем-объект-делегата" tabindex="-1"><a class="header-anchor" href="#упрощение-1-не-создаем-объект-делегата"><span>Упрощение 1: не создаём объект делегата</span></a></h3><p>Компилятор C# разрешает не указывать делегат, а передавать в качестве параметра там, где ожидается делегат, имя метода.</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">internal</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">AClass</span>
<span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">CallbackWithoutNewingADelegateObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    ThreadPool<span class="token punctuation">.</span><span class="token function">QueueUserWorkItem</span><span class="token punctuation">(</span>SomeAsyncTask<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SomeAsyncTask</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="упрощение-2-не-определяем-метод-обратного-вызова" tabindex="-1"><a class="header-anchor" href="#упрощение-2-не-определяем-метод-обратного-вызова"><span>Упрощение 2: не определяем метод обратного вызова</span></a></h3><p>C# позволяет подставить реализацию метода обратного вызова непосредственно в код, а не в отдельный метод:</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">internal</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">AClass</span>
<span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">CallbackWithoutNewingADelegateObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    ThreadPool<span class="token punctuation">.</span><span class="token function">QueueUserWorkItem</span><span class="token punctuation">(</span>obj <span class="token operator">=&gt;</span> Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Формально, в C# подобный фрагмент кода, который передаётся в качестве делегата, называется <em>лямбда-выражением</em> (lambda expression) и распознаётся по наличию оператора <code>=&gt;</code>. Обнаружив лямбда-выражение, компилятор автоматически определяет в классе новый закрытый метод. Этот метод называется <code>анонимной функцией</code> (anonymous function), так как имя, создаваемое компилятором, неизвестно. Но имя можно узнать, воспользовавшись ILDasm.exe.</p><p>Компилятор выбирает имя метода, начинающегося с <code>&lt;</code>, так как идентификаторы в C# не могут содержать этот символ, что гарантирует невозможность выбора программистом такого же имени. Кроме этого, компилятор применяет к метода специальный атрибут, дающий возможность понять, что код сгенерирован, а не написан разработчиком.</p><p>При написании лямбда-выражений к сгенерированному компилятором методу нельзя применить пользовательские атрибуты или модификаторы. Но это не является проблемой, так как такие методы всегда закрыты. Кроме того, такие методы помечаются как статические или экземплярные в зависимости от того, есть ли у них доступ к данным класса.</p>`,58),d=s("code",null,"=>",-1),k={href:"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/lambda-expressions#input-parameters-of-a-lambda-expression",target:"_blank",rel:"noopener noreferrer"},r=a(`<div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// Если делегат не содержит аргументов, используйте круглые скобки</span>
<span class="token class-name">Func<span class="token punctuation">&lt;</span>String<span class="token punctuation">&gt;</span></span> f <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&quot;Jeff&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// Если аргумент у делегата всего один, круглые скобки можно опустить</span>
<span class="token class-name">Func<span class="token punctuation">&lt;</span>Int32<span class="token punctuation">,</span> String<span class="token punctuation">&gt;</span></span> f6 <span class="token operator">=</span> n <span class="token operator">=&gt;</span> n<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Для аргументов ref/out нужно в явном виде указывать ref/out и тип</span>
<span class="token class-name">Bar</span> b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">out</span> <span class="token class-name">Int32</span> n<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> n <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>

<span class="token comment">// Для делегатов с одним и более аргументами можно в явном виде указать типы</span>
<span class="token class-name">Func<span class="token punctuation">&lt;</span>Int32<span class="token punctuation">,</span> String<span class="token punctuation">&gt;</span></span> f2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Int32</span> n<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> n<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Func<span class="token punctuation">&lt;</span>Int32<span class="token punctuation">,</span> Int32<span class="token punctuation">,</span> String<span class="token punctuation">&gt;</span></span> f3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Int32</span> n1<span class="token punctuation">,</span> <span class="token class-name">Int32</span> n2<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>n1 <span class="token operator">+</span> n2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Компилятор может самостоятельно определить типы для делегатов с одним и более аргументами</span>
<span class="token class-name">Func<span class="token punctuation">&lt;</span>Int32<span class="token punctuation">,</span> String<span class="token punctuation">&gt;</span></span> f4 <span class="token operator">=</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> n<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Func<span class="token punctuation">&lt;</span>Int32<span class="token punctuation">,</span> Int32<span class="token punctuation">,</span> String<span class="token punctuation">&gt;</span></span> f5 <span class="token operator">=</span> <span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>n1 <span class="token operator">+</span> n2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Чтобы вставить в тело лямбда-выражения несколько инструкций, стоит заключить их в фигурные скобки.</p><p>Основное преимущество лямбда-выражений в повышении читаемости кода. Если ссылка на один и тот же код требуется в разных местах кода, то лучшим решением будет объявить метод и передать его в качестве делегата. Иначе - лямбда-выражение является прекрасным решением.</p><h3 id="упрощение-3-не-создаем-обертку-для-локальных-переменных-для-передачи-их-методу-обратного-вызова" tabindex="-1"><a class="header-anchor" href="#упрощение-3-не-создаем-обертку-для-локальных-переменных-для-передачи-их-методу-обратного-вызова"><span>Упрощение 3: не создаём обёртку для локальных переменных для передачи их методу обратного вызова</span></a></h3><p>Код обратного вызова может ссылаться на другие члены класса. Но иногда необходимо обратиться из этого кода к локальной переменной или параметру. Для этого потребуется вспомогательный класс, определяющий поле для каждого значения, которое требуется передать в код обратного вызова. Кроме того, этот код стоит определить во вспомогательном классе как экземплярный. Тогда вызывающий код создаст экземпляр вспомогательного класса, присвоит полям значения локальный переменных и создаст объект делегата. Это нудная и чреватая ошибками работа, которую компилятор лучше выполнит за разработчика.</p><p>Когда лямбда-выражение заставляет компилятор генерировать класс с превращёнными в поля параметрами или локальными переменными, увеличивается время жизни объекта, на который ссылаются эти переменные. То есть локальные переменные не будут уничтожены по завершении метода, как это происходит обычно, а только после завершения метода, в котором они используются.</p><p>Лямбда-выражения значительно упрощают понимание и сопровождение кода, но не стоит их писать везде. Рихтер устанавливает такое правило: &quot;Если в теле лямбда выражения больше трёх строк кода, то следует вынести это в отдельный именованный метод&quot;.</p><h2 id="делегаты-и-отражение" tabindex="-1"><a class="header-anchor" href="#делегаты-и-отражение"><span>Делегаты и отражение</span></a></h2><p>Обычно разработчик знает прототип делегата, который собирается использовать. Однако если на момент компиляции информация о делегате не известна, стоит воспользоваться рефлексией. Подробнее об этом в можно прочесть в книге.</p>`,9);function m(v,g){const e=p("ExternalLinkIcon");return c(),o("div",null,[u,s("p",null,[n("Лямбда выражение должно соответствовать сигнатуре делегата. Имена аргументов, которые следует передать выражению, располагаются слева от оператора "),d,n(". При этом следует придерживаться следующих правил (подробнее в "),s("a",k,[n("документации"),l(e)]),n("):")]),r])}const b=t(i,[["render",m],["__file","ch17_Delegates.html.vue"]]),y=JSON.parse('{"path":"/ru/chapters/ch17_Delegates.html","title":"Делегаты","lang":"ru-RU","frontmatter":{},"headers":[{"level":2,"title":"Знакомство с делегатами","slug":"знакомство-с-делегатами","link":"#знакомство-с-делегатами","children":[]},{"level":2,"title":"Обратный вызов статических методов","slug":"обратныи-вызов-статических-методов","link":"#обратныи-вызов-статических-методов","children":[]},{"level":2,"title":"Обратный вызов экземплярных методов","slug":"обратныи-вызов-экземплярных-методов","link":"#обратныи-вызов-экземплярных-методов","children":[]},{"level":2,"title":"Тонкости использования делегатов","slug":"тонкости-использования-делегатов","link":"#тонкости-использования-делегатов","children":[]},{"level":2,"title":"Обратный вызов нескольких методов (цепочки делегатов)","slug":"обратныи-вызов-нескольких-методов-цепочки-делегатов","link":"#обратныи-вызов-нескольких-методов-цепочки-делегатов","children":[{"level":3,"title":"Поддержка цепочек делегатов C#","slug":"поддержка-цепочек-делегатов-c","link":"#поддержка-цепочек-делегатов-c","children":[]},{"level":3,"title":"Дополнительные средства управления цепочками делегатов","slug":"дополнительные-средства-управления-цепочками-делегатов","link":"#дополнительные-средства-управления-цепочками-делегатов","children":[]}]},{"level":2,"title":"Обобщённые делегаты","slug":"обобщенные-делегаты","link":"#обобщенные-делегаты","children":[]},{"level":2,"title":"Упрощённый синтаксис работы с делегатами","slug":"упрощенныи-синтаксис-работы-с-делегатами","link":"#упрощенныи-синтаксис-работы-с-делегатами","children":[{"level":3,"title":"Упрощение 1: не создаём объект делегата","slug":"упрощение-1-не-создаем-объект-делегата","link":"#упрощение-1-не-создаем-объект-делегата","children":[]},{"level":3,"title":"Упрощение 2: не определяем метод обратного вызова","slug":"упрощение-2-не-определяем-метод-обратного-вызова","link":"#упрощение-2-не-определяем-метод-обратного-вызова","children":[]},{"level":3,"title":"Упрощение 3: не создаём обёртку для локальных переменных для передачи их методу обратного вызова","slug":"упрощение-3-не-создаем-обертку-для-локальных-переменных-для-передачи-их-методу-обратного-вызова","link":"#упрощение-3-не-создаем-обертку-для-локальных-переменных-для-передачи-их-методу-обратного-вызова","children":[]}]},{"level":2,"title":"Делегаты и отражение","slug":"делегаты-и-отражение","link":"#делегаты-и-отражение","children":[]}],"git":{"updatedTime":1712403629000},"filePathRelative":"ru/chapters/ch17_Delegates.md"}');export{b as comp,y as data};
