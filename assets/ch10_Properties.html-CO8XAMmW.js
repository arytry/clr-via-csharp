import{_ as n,o as s,c as a,e}from"./app-IxoMmWNN.js";const p={},t=e(`<h1 id="своиства" tabindex="-1"><a class="header-anchor" href="#своиства"><span>Свойства</span></a></h1><h2 id="своиства-без-параметров" tabindex="-1"><a class="header-anchor" href="#своиства-без-параметров"><span>Свойства без параметров</span></a></h2><p>Во многих типах определяется информация состояния, которую можно прочитать или изменить. Часто эта информация реализуется полями типа.</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">Person</span>
<span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token class-name">Int32</span> Age<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Этот способ чтения и записи является очень распространённым. Однако автор считает, что такая реализация недопустима. Краеугольным камнем ООП является <em>инкапсуляция данных</em>. Инкапсуляция данных означает, что поля типа ни в коем случае нельзя открывать для общего доступа, иначе это может испортить сведения о состоянии объекта. Например, человеку можно выставить отрицательный возраст.</p><p>Есть и другие причины для инкапсуляции. Допустим, нужен доступ к полю, но так, чтобы обращение не нарушало безопасность потоков. Или, например, поле является логическим, и его значение представлено не байтами в памяти, а вычисляется по некоторому алгоритму.</p><p>Каждая из этих причин заставляет при разработке типов, во-первых, помечать все поля как закрытые, во-вторых, давать пользователю вашего типа возможность получения и задания сведений о состоянии через специальные методы, переназначенные исключительно для этого. Методы, выполняющие функции оболочки доступа к полю, обычно называют <em>методами доступа</em> (accessor). Методы доступа могут выполнять дополнительные проверки, гарантируя, что сведения о состоянии объекта не будут искажены.</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> 
<span class="token punctuation">{</span>
	<span class="token keyword">private</span> <span class="token class-name">Int32</span> m_Age<span class="token punctuation">;</span> <span class="token comment">// Поле стало закрытым</span>

	<span class="token keyword">public</span> <span class="token return-type class-name">Int32</span> <span class="token function">GetAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
	<span class="token punctuation">{</span>
		<span class="token keyword">return</span><span class="token punctuation">(</span>m_Age<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	
	<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SetAge</span><span class="token punctuation">(</span><span class="token class-name">Int32</span> <span class="token keyword">value</span><span class="token punctuation">)</span> 
	<span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">value</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ArgumentOutOfRangeException</span><span class="token punctuation">(</span><span class="token string">&quot;value&quot;</span><span class="token punctuation">,</span> <span class="token keyword">value</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;The value must be greater than or equal to 0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	
		m_Age <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Методы доступа предоставляют огромное преимущество инкапсуляции полей данных. С помощью них можно также легко сделать поля доступными только для чтения или записи - достаточно удалить один из методов.</p><p>Однако у инкапсуляции данных есть два недостатка: во-первых, из-за реализации дополнительных методов приходится писать более длинный код, во-вторых, вместо простой ссылки на имя поля пользователям типа приходится вызывать соответствующие методы.</p><p>Автор считает эти недостатки незначительными. Тем не менее CLR поддерживает механизм свойств, частично компенсирующих первый недостаток и полностью устраняющий второй.</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> 
<span class="token punctuation">{</span>
	<span class="token keyword">private</span> <span class="token class-name">Int32</span> m_Age<span class="token punctuation">;</span>
 
	<span class="token keyword">public</span> <span class="token return-type class-name">Int32</span> Age 
	<span class="token punctuation">{</span>
		<span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span><span class="token punctuation">(</span>m_Age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
		<span class="token keyword">set</span> 
		<span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">value</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// Ключевое слово value всегда идентифицирует новое значение</span>
			<span class="token punctuation">{</span>
				<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ArgumentOutOfRangeException</span><span class="token punctuation">(</span><span class="token string">&quot;value&quot;</span><span class="token punctuation">,</span> <span class="token keyword">value</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;The value must be greater than or equal to 0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			
			m_Age <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Хоть свойства немного усложняют определение типа, доступ к полям типа извне становится куда более лаконичным.</p><p>Можно считать свойства умными полями, то есть полями с дополнительной логикой. CLR поддерживает статически, экземплярные, абстрактные и виртуальные свойства. Кроме того, свойства могут помечаться модификатором доступа и определяться в интерфейсах.</p><p>У каждого свойства есть имя и тип (но не <code>void</code>). Свойства нельзя перегружать, то есть делать несколько свойств с одинаковыми именами и разными типами. При определении свойств используют пару методов <code>get</code> и <code>set</code>, однако, опустив одно из них, можно получить поле только для записи или чтения соответственно.</p><p>Методы <code>get</code> и <code>set</code> свойства обычно манипулируют закрытым полем, определённым в типе. Это поле называют <em>резервным</em> (backing field). Однако методам не приходится обращаться к резервному полю.</p><p>При определении свойства компилятор генерирует и помещает в результирующий управляемый модель следующее:</p><ul><li>Метод <code>get</code> (только если определён соответствующий метод)</li><li>Метод <code>set</code> (только если определён соответствующий метод)</li><li>Определение свойства генерируется всегда</li></ul><p>Компилятор автоматически генерирует имена этих методов, прибавляя префиксы <code>get_</code> и <code>set_</code>.</p><p>Поддержка свойств встроена в C#. Обнаружив код, пытающийся получить или задать свойства, компилятор генерирует вызов соответствующего метода. Если язык не поддерживает свойства напрямую, то к ним всё равно можно обратиться посредством явного вызова метода, хоть такой код и выглядит менее элегантно.</p><h3 id="автоматически-реализуемые-своиства" tabindex="-1"><a class="header-anchor" href="#автоматически-реализуемые-своиства"><span>Автоматически реализуемые свойства</span></a></h3><p>Если необходимо создать свойства для инкапсуляции резервных полей, то в C# есть упрощённый синтаксис, называемый автоматически реализуемыми свойствами (Automatically Implemented Properties, AIP).</p><p>Если объявить свойство без реализации методов доступа, то C# автоматически объявит поле закрытым, и компилятор автоматически реализует методы для правильного возвращения значения из поля и назначения значения полю. Преимущество автосвойства состоит в том, что если в последствии захочется изменить код методов доступа, то не придётся перекомпилировать исходный код.</p><p>Автор старается избегать автосвойств по нескольким причинам:</p><ul><li>Синтаксис объявления поля может включать инициализацию, таким образом, разработчик объявляет и инициализирует поле в одной строки. Автосвойства необходимо инициализировать во всех конструкторах. (прим. Возможность инициализации автосвойств появилась в C# 6)</li><li>Механизм сериализации на этапе выполнения сохраняет имя поля в сериализованном потоке. Имя резервного поля для автосвойства определяется компилятором, и оно может меняться, сводя на нет возможности десериализации таких типов. Не стоит использовать автосвойства для типов, подлежащих сериализации и десериализации.</li><li>Во время отладки нельзя установить точку останова в методах доступа. Точки можно устанавливать только в свойствах, которые разработчик описывает самостоятельно.</li></ul><p>При использовании автосвойств свойства должны иметь уровень доступа для чтения и записи. Из-за того, что не известно имя автоматически генерируемого поля, программный код всегда должен обращаться к свойству по имени. А если разработчик решит явно реализовать один из методов доступа, то придётся явно реализовать оба метода, при этом отказавшись от автосвойств. Механизм автосвойств работает слишком бескомпромиссно.</p><h3 id="осторожныи-подход-к-определению-своиств" tabindex="-1"><a class="header-anchor" href="#осторожныи-подход-к-определению-своиств"><span>Осторожный подход к определению свойств</span></a></h3><p>Автор был бы рад удалить поддержку свойств из .NET, потому что они порождают путаницу, по его мнению:</p><ul><li>Свойства могут быть доступны только для чтения или записи, в то время как поле всегда доступно для чтения и записи.</li><li>Свойства, являясь методом, могут выдавать исключения, а при обращении к полям исключений не бывает.</li><li>Свойства нельзя передавать в метод с ключевым словом <code>out</code>.</li><li>Свойство-метод может выполняться довольно долго, в то время как обращение к полю происходит моментально. Часто свойства применяют для синхронизации потоков, но тогда поток может быть приостановлен на неопределённое время.</li><li>При нескольких вызовах подряд свойство-метод может вернуть разные значения (например, <code>System.DateTime.Now</code>).</li><li>Свойство-метод может порождать видимые побочные эффекты, невозможные при доступе к полю.</li><li>Свойству-методу может требоваться дополнительная память или ссылка на объект, не являющийся частью состояния объекта, поэтому изменение возвращаемого объекта никак не сказывается на исходном объекте.</li></ul><p>Автор считает, что разработчики используют свойства намного чаще, чем следовало бы. Да, свойства предоставляют удобный синтаксис, но при это теряются производительность и читаемость кода. (прим. <em>Я не согласен с автором. Может быть, действительно происходит потеря производительности, но синтаксис куда удобнее обычных полей.</em>)</p><h3 id="своиства-и-отладчик-visual-studio" tabindex="-1"><a class="header-anchor" href="#своиства-и-отладчик-visual-studio"><span>Свойства и отладчик Visual Studio</span></a></h3><p>...</p><h3 id="инициализаторы-объектов-и-коллекции" tabindex="-1"><a class="header-anchor" href="#инициализаторы-объектов-и-коллекции"><span>Инициализаторы объектов и коллекций</span></a></h3><p>Создание объекта с заданием некоторых открытых свойств (или полей) - чрезвычайно распространённая операция. Для её упрощения в C# предусмотрен специальный синтаксис:</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name">Employee</span> e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">&quot;Jeff&quot;</span><span class="token punctuation">,</span> Age <span class="token operator">=</span> <span class="token number">45</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Компилируется это всё так, как если бы сначала был создан объект через вызов конструктора по умолчанию, потом были бы инициализированы поля, и в конце полученный объект присваивался бы переменной.</p><p>Реальная выгода от синтаксиса инициализатора в том, что можно применять к полученному объекту цепочные функции:</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">&quot;Jeff&quot;</span><span class="token punctuation">,</span> Age <span class="token operator">=</span> <span class="token number">45</span> <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToUpper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>C# также позволяет опускать круглые скобки перед открывающей фигурной, если разработчик хочет вызвать конструктор без параметров.</p><p>Если тип свойства реализует интерфейс IEnumerable или IEnumerable&lt;T&gt;, то свойство является коллекцией, а инициализация является дополняющей (а не заменяющей) операцией. Тогда код будет идентичен тому, как если бы сначала создалась коллекция, а потом элементы помещались бы туда по одному через метод <code>Add()</code>.</p><p>Если же тип реализует данные интерфейсы, но не имеет метода <code>Add()</code>, тогда коллекцию нельзя инициализировать.</p><h3 id="анонимные-типы" tabindex="-1"><a class="header-anchor" href="#анонимные-типы"><span>Анонимные типы</span></a></h3><p>Механизм анонимных типов в C# позволяет объявить кортежный тип при помощи простого синтаксиса. <em>Кортежный тип</em> (tuple type) - тип, который содержит коллекцию свойств, каким-то образом связанных друг с другом.</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> o1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">&quot;Jeff&quot;</span><span class="token punctuation">,</span> Year <span class="token operator">=</span> <span class="token number">1964</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Здесь создаётся анонимный тип, потому что не был определён тип имени после <code>new</code>. Таким образом компилятор автоматически создаёт имя типа, но не сообщает его (поэтому тип и называется анонимным). В таком случае всегда используется неявная типизация с применением ключевого слова <code>var</code>.</p><p>При использовании анонимного типа, компилятор определяет тип каждого выражения, создаёт закрытые поля этих типов, для каждого поля созда1т открытые свойства только для чтения и для всех этих выражений создаёт конструктор. Код конструктора инициализирует закрытые поля только для чтения путём вычисления результирующих значений. В дополнение к этому, компилятор переопределяет методы <code>Equals()</code>, <code>GetHashCode()</code> и <code>ToString()</code>.</p><p>Компилятор генерирует первые два метода, чтобы экземпляр анонимного типа могли размещаться в хеш-таблица. Неизменяемые свойства помогают защитить хеш-код объекта от изменений, так как это может помешать нахождению объекта в таблице. Последний же метод компилятор генерирует для упрощения отладки.</p><p>Также свойства анонимного типа можно инициализировать переменными или их свойствами, без явного указания имени. Тогда имя и тип свойства анонимного типа будут совпадать с именем и типом выражения.</p><p>Компилятор очень разумно выявляет анонимный тип. Если он видит, что определено множество анонимных типов с идентичными структурами, то он создаёт одно определение этого типа и множество его экземпляров. Под одинаковой структурой подразумевается одинаковые типы, имена и порядок следования свойств.</p><p>Раз две переменные относятся к одинаковому типу, то их можно сравнивать, а также присваивать ссылку на один объект переменной другого объекта.</p><p>Раз эти типы идентичны, то можно создать массив из анонимных типов.</p><p>Анонимные типы обычно используются с технологией языка интегрированных запросов (Language INtegrated Query, LINQ), когда в результате выполнения запроса создаётся коллекция объектов, относящихся к одному анонимному типу.</p><p>Экземпляры анонимного типа не должны выходить за пределы метода. В прототипе метода не может содержаться параметр анонимного типа, так как задать его невозможно. По тому же принципу метод не может возвращать анонимный тип. Хотя экземпляры анонимного типа можно преобразовать к <code>object</code>, выполнить обратное преобразование нельзя, потому что имя анонимного типа на этапе компиляции неизвестно. Для передачи кортежного типа следует использовать <code>System.Tuple</code> (прим. <em>Или <code>dynamic</code>, хотя лучше этого не делать</em>).</p><h3 id="тип-system-tuple" tabindex="-1"><a class="header-anchor" href="#тип-system-tuple"><span>Тип System.Tuple</span></a></h3><p>В пространстве имён <code>System</code> определено несколько обобщённых кортежных типов, которые отличаются количеством обобщённых параметров.</p><p>Как и объекты анонимного типа, объект <code>Tuple</code> создаётся один раз и остаётся неизменным. Кортеж позволяет использовать все базовые методы, а также методы сравнения (через реализацию в типе кортежа соответствующих интерфейсов).</p><p>Важно, чтобы производитель и потребитель кортежа имели чёткое представление о том, что возвращается в элементах кортежа. С анонимными типами свойства получают действительные имена на основании программного кода, инициализирующего их. Для кортежа имена назначаются автоматически и не имеют настоящего смысла, что ухудшает читабельность и сопровождение, так что появляется необходимость добавлять комментарии.</p><p>Чтобы создать кортеж с более чем восьмью элементами, стоит использовать вложенный кортеж.</p><p>Кроме анонимных и кортежных типов, стоит присмотреться к классу <code>System.Dynamic.ExpandoObject</code>. Он не обладает безопасностью типов, зато предоставляет удобный синтаксис.</p><h2 id="своиства-с-параметрами" tabindex="-1"><a class="header-anchor" href="#своиства-с-параметрами"><span>Свойства с параметрами</span></a></h2><p>Методы <code>get</code> свойств, описанные ранее, не принимали параметров. Поэтому такие свойства называются <em>свойствами без параметров</em> (parameterless properties). Они проще, так как их использование напоминает обращение к полю. Помимо таких свойств, языки программирования поддерживают также <em>свойства с параметрами</em> (parameterful properties). У таких свойств методы <code>get</code> принимают один или несколько параметров. В C# такие свойства называют <em>индексаторами</em>.</p><p>В C# синтаксис свойств с параметрами напоминает синтаксис массивов. Иначе говоря, свойства с параметрами представляют из себя перегрузку оператора <code>[]</code></p><p>У каждого индексатора должен быть хотя бы один параметр, но может быть и несколько. Типы параметра и возвращаемого значения могут быть любыми.</p><p>Индексаторы довольно часто создаются для поиска значений в ассоциативном массиве (словаре). В отличие от свойств без параметров, индексаторы можно перегружать при условии, что их сигнатуры отличны.</p><p>Метод <code>set</code> индексатора содержит скрытый параметр, который указывает новое значение индексируемого объекта.</p><p>CLR не различает свойства с параметрами и без. Для среды любое свойство - это всего лишь пара методов в типе. Использование для индексатора в C# конструкции <code>this[...]</code> - всего лишь решение, означающее, что в C# индексаторы могут определяться только для экземпляров объектов. В C# нет синтаксиса, позволяющего разработчику определять статический индексатор, хотя сам CLR поддерживает такое.</p><p>Поскольку свойства без параметров и с ними обрабатываются CLR одинаково, компилятор генерирует в итоговой управляемой сборке два или три элемента из следующего списка:</p><ul><li>Метод <code>get</code> (только если определён соответствующий метод)</li><li>Метод <code>set</code> (только если определён соответствующий метод)</li><li>Определение свойства генерируется всегда</li></ul><p>Компилятор автоматически генерирует имена методов индексатора, добавляя к имени индексатора префиксы <code>get_</code> и <code>set_</code>. Поскольку разработчик не может задать имя индексатора, компилятор сам проставляет имя <code>Item</code>. Если в документации сказано, что тип поддерживает свойство <code>Item</code>, значит, тип поддерживает индексатор.</p><p>Программируя на C#, разработчик не встретит имя <code>Item</code>. Однако при разработке типа с индексатором, который будет использоваться в программах на другой языке, стоит подумать об удобочитаемом имени, которое можно задать через специальный атрибут.</p><p>В C# можно перегружать индексаторы только по сигнатуре. В других языках можно создать индексаторы с одинаковой сигнатурой, так как имена могут отличаться. Однако C# не допускает такого, потому что не сможет найти, к какому индексатору обратиться.</p><p>В качестве примера типа с изменённым именем индексатора в C# выступает строка, так как имя Chars более информативно.</p><p>Обнаружив попытке чтения или записи индексатора, C# генерирует вызов соответствующего метода. Если язык не поддерживает индексаторы, то можно вызывать методы явно.</p><h3 id="выбор-главного-своиства-с-параметрами" tabindex="-1"><a class="header-anchor" href="#выбор-главного-своиства-с-параметрами"><span>Выбор главного свойства с параметрами</span></a></h3><p>При анализе ограничений, которые C# налагает на индексаторы, возникает два вопроса:</p><ul><li>Что если язык, на котором написан тип, позволят определить несколько индексаторов?</li><li>Как использовать этот тип в программе на C#?</li></ul><p>Для этого надо применить специальный атрибут, который выбирал бы один из индексаторов как индексатор по умолчанию.</p><h2 id="производительность-при-вызове-методов-доступа" tabindex="-1"><a class="header-anchor" href="#производительность-при-вызове-методов-доступа"><span>Производительность при вызове методов доступа</span></a></h2><p>В случае простых методов доступа <code>get</code> и <code>set</code> JIT-компилятор <em>подставляет</em> (inlines) код метода доступа внутрь кода вызываемого метода, поэтому характерного снижения производительности работы программы, проявляющегося при использовании свойств вместо полей, не наблюдается. Подстановка подразумевает компиляцию кода метода доступа непосредственно вместе с кодом вызывающего доступа. Это избавляет от дополнительной нагрузки, связанной с вызовом при выполнении, за счёт увеличения объёма кода. Это реализовано так потому, что код методов доступа обычно очень мал.</p><p>Однако при отладке JIT-компилятор не подставляет методы свойств, потому что такой код было бы сложнее отлаживать. Это значит, что в релизной версии скорость доступа к свойствам выше, чем в отладочной. Эффективность доступа к полям одинакова.</p><h2 id="доступность-метода-доступа-своиств" tabindex="-1"><a class="header-anchor" href="#доступность-метода-доступа-своиств"><span>Доступность метода доступа свойств</span></a></h2><p>Иногда требуется применить различные модификаторы доступа к методам доступа. В таком случае компилятор C# требует, чтобы само свойство имело наименее жёсткое ограничение видимости, а методы доступа - более жёсткое.</p><h2 id="обобщенные-методы-доступа-своиств" tabindex="-1"><a class="header-anchor" href="#обобщенные-методы-доступа-своиств"><span>Обобщённые методы доступа свойств</span></a></h2><p>Свойства фактически представляют собой методы, а C# и CLR поддерживает параметризацию методов, поэтому некоторые разработчики пытаются определить свойства со своими собственными параметрами-типами (вместо использования таких параметров из внешнего типа). Однако C# не позволяет это сделать. Главная причина в том, что обобщения лишены смысла с концептуальной точки зрения. Предполагается, что свойство представляет характеристику объекта, которую можно прочитать или задать. Введение обобщённого параметра типа означало бы, что поведение операции чтения/записи может меняться, но на концептуальном уровне от свойства не ожидается никакого поведения. Для задания поведения объекта стоит создать метод, а не свойство.</p>`,84),c=[t];function l(o,i){return s(),a("div",null,c)}const u=n(p,[["render",l],["__file","ch10_Properties.html.vue"]]),r=JSON.parse('{"path":"/ru/chapters/ch10_Properties.html","title":"Свойства","lang":"ru-RU","frontmatter":{},"headers":[{"level":2,"title":"Свойства без параметров","slug":"своиства-без-параметров","link":"#своиства-без-параметров","children":[{"level":3,"title":"Автоматически реализуемые свойства","slug":"автоматически-реализуемые-своиства","link":"#автоматически-реализуемые-своиства","children":[]},{"level":3,"title":"Осторожный подход к определению свойств","slug":"осторожныи-подход-к-определению-своиств","link":"#осторожныи-подход-к-определению-своиств","children":[]},{"level":3,"title":"Свойства и отладчик Visual Studio","slug":"своиства-и-отладчик-visual-studio","link":"#своиства-и-отладчик-visual-studio","children":[]},{"level":3,"title":"Инициализаторы объектов и коллекций","slug":"инициализаторы-объектов-и-коллекции","link":"#инициализаторы-объектов-и-коллекции","children":[]},{"level":3,"title":"Анонимные типы","slug":"анонимные-типы","link":"#анонимные-типы","children":[]},{"level":3,"title":"Тип System.Tuple","slug":"тип-system-tuple","link":"#тип-system-tuple","children":[]}]},{"level":2,"title":"Свойства с параметрами","slug":"своиства-с-параметрами","link":"#своиства-с-параметрами","children":[{"level":3,"title":"Выбор главного свойства с параметрами","slug":"выбор-главного-своиства-с-параметрами","link":"#выбор-главного-своиства-с-параметрами","children":[]}]},{"level":2,"title":"Производительность при вызове методов доступа","slug":"производительность-при-вызове-методов-доступа","link":"#производительность-при-вызове-методов-доступа","children":[]},{"level":2,"title":"Доступность метода доступа свойств","slug":"доступность-метода-доступа-своиств","link":"#доступность-метода-доступа-своиств","children":[]},{"level":2,"title":"Обобщённые методы доступа свойств","slug":"обобщенные-методы-доступа-своиств","link":"#обобщенные-методы-доступа-своиств","children":[]}],"git":{"updatedTime":1712405766000},"filePathRelative":"ru/chapters/ch10_Properties.md"}');export{u as comp,r as data};
