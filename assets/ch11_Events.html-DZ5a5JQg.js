import{_ as e,o as t,c as a,e as c}from"./app-IxoMmWNN.js";const s={},l=c('<h1 id="события" tabindex="-1"><a class="header-anchor" href="#события"><span>События</span></a></h1><p>В данной главе рассматривается последняя разновидность членов, которые можно определить в типе, - события. Тип, в котором определено событие (или экземпляры этого типа), может уведомлять другие объекты о некоторых особых ситуациях, которые могут случиться. Определение события в типе означает, что тип поддерживает следующие возможности:</p><ul><li>Регистрация своей заинтересованности в событии.</li><li>Отмена регистрации своей заинтересованности в событии.</li><li>Оповещение зарегистрированных методов о произошедшем событии.</li></ul><p>Типы могут предоставлять эту функциональность при определении событий, так как они поддерживают список зарегистрированных методов. Когда событие происходит, тип уведомляет об этом все зарегистрированные методы.</p><p>Модель событий CLR основана на <em>делегатах</em> (delegate). Делегаты обеспечивают реализацию механизме обратного вызова, безопасную по отношению к типам. Методы обратного вызова (callback methods) позволяют объекту получать уведомления, на которые он подписался.</p><p>Прим. <em>В работе я редко (практически никогда) сталкивался с событиями. В микросервисной архитектуре механизм событий построен через асинхронное взаимодействие сервисов, а механизм событий больше подходит для десктопных приложений с графическим интерфейсом. Поэтому данную главу я пропущу, для веб-разработки хватит и общего понимания, что такой механизм возможен.</em></p>',6),n=[l];function r(h,i){return t(),a("div",null,n)}const p=e(s,[["render",r],["__file","ch11_Events.html.vue"]]),_=JSON.parse('{"path":"/ru/chapters/ch11_Events.html","title":"События","lang":"ru-RU","frontmatter":{},"headers":[],"git":{"updatedTime":1712403629000},"filePathRelative":"ru/chapters/ch11_Events.md"}');export{p as comp,_ as data};
